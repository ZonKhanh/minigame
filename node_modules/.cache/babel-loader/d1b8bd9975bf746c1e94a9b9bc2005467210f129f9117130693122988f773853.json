{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst gameContentModalInitialState = {\n  nameCorrectIndex: null,\n  requiredNumberProducts: 0,\n  randomNameCorrect: '',\n  listProducts: [],\n  listCharacters: [],\n  levels: [],\n  timeStepPercentage: [],\n  currentScore: 0,\n  currentLevel: 1,\n  requiredProductNumber: 0,\n  numberCorrect: 0,\n  numberCorrectDisplay: 'none',\n  initTimeRemainder: 100,\n  score: 0,\n  intervalId: null,\n  showGameContent: false,\n  showErrorModal: false,\n  showResultGameModal: false,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timerRangeWidth: '100%',\n    timeStep: 10\n  },\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n  audioFail: new Audio(\"/music/wrong.mp3\"),\n  gameSound: {\n    maxVolume: 1,\n    audioRatio: 1\n  }\n};\nconst gameContentModalSlice = createSlice({\n  name: 'gameContentModal',\n  initialState: gameContentModalInitialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r, _state$listProducts$;\n      const maxRequiredProducts = 5;\n      let randomIndex;\n      if (state.nameCorrectIndex !== undefined) {\n        do {\n          randomIndex = Math.floor(Math.random() * state.listProducts.length);\n        } while (randomIndex === state.nameCorrectIndex);\n      } else {\n        randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      }\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || ((_state$listProducts$ = state.listProducts[0]) === null || _state$listProducts$ === void 0 ? void 0 : _state$listProducts$.title) || '';\n    },\n    // incrementNumberCorrect(state) {\n    //     state.numberCorrect += 1;\n    // },\n    // resetNumberCorrect(state) {\n    //     state.numberCorrect = 0;\n    // },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n      // Kiểm tra nếu currentLevel tăng lên so với lần trước\n      if (state.currentLevel > state.previousLevel) {\n        const newPlaybackRate = state.gameSound.audioRatio + 0.1;\n        state.gameSound.audioRatio = newPlaybackRate;\n        state.audioBackground.playbackRate = newPlaybackRate;\n        playbackRateAudioBackground(state, {\n          payload: newPlaybackRate\n        });\n      }\n      // Cập nhật previousLevel để kiểm tra lần sau\n      state.previousLevel = state.currentLevel;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    // Audio\n    setAudioBackground(state, action) {\n      state.audioBackground = new Audio(action.payload);\n      state.audioBackground.playbackRate = state.gameSound.audioRatio;\n    },\n    setAudioFail(state, action) {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound(state) {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = state.gameSound.audioRatio;\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver(state) {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground(state, action) {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    },\n    // Reset\n    resetGame() {\n      return gameContentModalInitialState;\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    // Timer\n    showCountdownTime(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        state.intervalId = null;\n        state.gameTime.timeRemainder = 0;\n      }\n      state.gameTime.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\n    },\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.gameTime.timerRangeWidth = '100%';\n    },\n    clearGameInterval(state) {\n      state.intervalId = null;\n      clearInterval(state.gameTime.timerInterval);\n    },\n    showResultGame(state) {\n      state.showResultGameModal = true;\n      state.finalScore = state.currentScore;\n    },\n    hideResultModal(state) {\n      state.showResultGameModal = false;\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  showRandomNameCorrect,\n  incrementNumberCorrect,\n  resetNumberCorrect,\n  incrementScore,\n  updateGameLevel,\n  setRandomProductNumber,\n  setGameData,\n  setAudioBackground,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground,\n  resetGame,\n  toggleGameContent,\n  setTimerInterval,\n  showCountdownTime,\n  resetCountdownTime,\n  clearGameInterval,\n  updateFinalScore,\n  showResultGame,\n  hideResultGame\n} = gameContentModalSlice.actions;\nexport default gameContentModalSlice.reducer;","map":{"version":3,"names":["createSlice","gameContentModalInitialState","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","listProducts","listCharacters","levels","timeStepPercentage","currentScore","currentLevel","requiredProductNumber","numberCorrect","numberCorrectDisplay","initTimeRemainder","score","intervalId","showGameContent","showErrorModal","showResultGameModal","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","audioBackground","Audio","audioFail","gameSound","maxVolume","audioRatio","gameContentModalSlice","name","initialState","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","showRandomNameCorrect","_state$listProducts$r","_state$listProducts$","maxRequiredProducts","randomIndex","undefined","Math","floor","random","length","title","incrementScore","updateGameLevel","levelData","find","level","timeStepDenominator","previousLevel","newPlaybackRate","playbackRate","playbackRateAudioBackground","setRandomProductNumber","setGameData","products","characters","setAudioBackground","setAudioFail","playBackgroundSound","play","catch","error","console","playSoundGameOver","resetGame","toggleGameContent","setTimerInterval","showCountdownTime","clearInterval","max","resetCountdownTime","clearGameInterval","showResultGame","finalScore","hideResultModal","incrementNumberCorrect","resetNumberCorrect","updateFinalScore","hideResultGame","actions","reducer"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/backup/minigame-react/src/components/GameContentModal/GameContentModalSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst gameContentModalInitialState = {\r\n    nameCorrectIndex: null,\r\n    requiredNumberProducts: 0,\r\n    randomNameCorrect: '',\r\n    listProducts: [],\r\n    listCharacters: [],\r\n    levels: [],\r\n    timeStepPercentage: [],\r\n    currentScore: 0,\r\n    currentLevel: 1,\r\n    requiredProductNumber: 0,\r\n    numberCorrect: 0,\r\n    numberCorrectDisplay: 'none',\r\n    initTimeRemainder: 100,\r\n    score: 0,\r\n    intervalId: null,\r\n    showGameContent: false,\r\n    showErrorModal: false,\r\n    showResultGameModal: false,\r\n    gameTime: {\r\n        timerInterval: null,\r\n        timeRemainder: 100,\r\n        timerRangeWidth: '100%',\r\n        timeStep: 10,\r\n    },\r\n    audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n    audioFail: new Audio(\"/music/wrong.mp3\"),\r\n    gameSound: {\r\n        maxVolume: 1,\r\n        audioRatio: 1,\r\n    },\r\n};\r\n\r\nconst gameContentModalSlice = createSlice({\r\n    name: 'gameContentModal',\r\n    initialState: gameContentModalInitialState,\r\n    reducers: {\r\n        updateProducts(state, action) {\r\n            state.listProducts = action.payload;\r\n        },\r\n        updateCharacters(state, action) {\r\n            state.listCharacters = action.payload;\r\n        },\r\n        updateLevels(state, action) {\r\n            state.levels = action.payload;\r\n        },\r\n        updateTimeStepPercentage(state, action) {\r\n            state.timeStepPercentage = action.payload;\r\n        },\r\n        showRandomNameCorrect(state) {\r\n            const maxRequiredProducts = 5;\r\n            let randomIndex;\r\n            if (state.nameCorrectIndex !== undefined) {\r\n                do {\r\n                    randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n                } while (randomIndex === state.nameCorrectIndex);\r\n            } else {\r\n                randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n            }\r\n            state.nameCorrectIndex = randomIndex;\r\n            state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n            state.randomNameCorrect = state.listProducts[randomIndex]?.title || state.listProducts[0]?.title || '';\r\n        },\r\n        // incrementNumberCorrect(state) {\r\n        //     state.numberCorrect += 1;\r\n        // },\r\n        // resetNumberCorrect(state) {\r\n        //     state.numberCorrect = 0;\r\n        // },\r\n        incrementScore(state) {\r\n            state.currentScore += 1;\r\n        },\r\n        updateGameLevel(state) {\r\n            state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n            const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n            if (levelData) {\r\n                state.timeStepDenominator = levelData.timeStepPercentage;\r\n                state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n            }\r\n            // Kiểm tra nếu currentLevel tăng lên so với lần trước\r\n            if (state.currentLevel > state.previousLevel) {\r\n                const newPlaybackRate = state.gameSound.audioRatio + 0.1;\r\n                state.gameSound.audioRatio = newPlaybackRate;\r\n                state.audioBackground.playbackRate = newPlaybackRate;\r\n                playbackRateAudioBackground(state, { payload: newPlaybackRate });\r\n            }\r\n            // Cập nhật previousLevel để kiểm tra lần sau\r\n            state.previousLevel = state.currentLevel;\r\n        },\r\n        setRandomProductNumber(state, action) {\r\n            state.requiredProductNumber = action.payload;\r\n        },\r\n        setGameData(state, action) {\r\n            state.listProducts = action.payload.products;\r\n            state.listCharacters = action.payload.characters;\r\n            state.levels = action.payload.levels;\r\n        },\r\n        // Audio\r\n        setAudioBackground(state, action) {\r\n            state.audioBackground = new Audio(action.payload);\r\n            state.audioBackground.playbackRate = state.gameSound.audioRatio;\r\n        },\r\n        setAudioFail(state, action) {\r\n            state.audioFail = new Audio(action.payload);\r\n        },\r\n        playBackgroundSound(state) {\r\n            if (state.audioBackground) {\r\n                state.audioBackground.playbackRate = state.gameSound.audioRatio;\r\n                state.audioBackground.play().catch(error => {\r\n                    console.error('Audio play failed:', error);\r\n                });\r\n            }\r\n        },\r\n        playSoundGameOver(state) {\r\n            if (state.audioFail) {\r\n                state.audioFail.play().catch(error => {\r\n                    console.error('Audio play failed:', error);\r\n                });\r\n            }\r\n        },\r\n        playbackRateAudioBackground(state, action) {\r\n            if (state.audioBackground) {\r\n                state.audioBackground.playbackRate = action.payload;\r\n            }\r\n        },\r\n        // Reset\r\n        resetGame() {\r\n            return gameContentModalInitialState;\r\n        },\r\n        toggleGameContent(state, action) {\r\n            state.showGameContent = action.payload;\r\n        },\r\n        setTimerInterval(state, action) {\r\n            state.gameTime.timerInterval = action.payload;\r\n        },\r\n        // Timer\r\n        showCountdownTime(state) {\r\n            state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n            if (state.gameTime.timeRemainder <= 0) {\r\n                clearInterval(state.gameTime.timerInterval);\r\n                state.intervalId = null;\r\n                state.gameTime.timeRemainder = 0;\r\n            }\r\n            state.gameTime.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\r\n        },\r\n        resetCountdownTime(state) {\r\n            state.gameTime.timeRemainder = state.initTimeRemainder;\r\n            state.gameTime.timerRangeWidth = '100%';\r\n        },\r\n        clearGameInterval(state) {\r\n            state.intervalId = null\r\n            clearInterval(state.gameTime.timerInterval);\r\n        },\r\n        showResultGame(state) {\r\n            state.showResultGameModal = true;\r\n            state.finalScore = state.currentScore;\r\n        },\r\n        hideResultModal(state) {\r\n            state.showResultGameModal = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    updateProducts,\r\n    updateCharacters,\r\n    updateLevels,\r\n    updateTimeStepPercentage,\r\n    showRandomNameCorrect,\r\n    incrementNumberCorrect,\r\n    resetNumberCorrect,\r\n    incrementScore,\r\n    updateGameLevel,\r\n    setRandomProductNumber,\r\n    setGameData,\r\n    setAudioBackground,\r\n    setAudioFail,\r\n    playBackgroundSound,\r\n    playSoundGameOver,\r\n    playbackRateAudioBackground,\r\n    resetGame,\r\n    toggleGameContent,\r\n    setTimerInterval,\r\n    showCountdownTime,\r\n    resetCountdownTime,\r\n    clearGameInterval,\r\n    updateFinalScore,\r\n    showResultGame,\r\n    hideResultGame\r\n} = gameContentModalSlice.actions;\r\n\r\nexport default gameContentModalSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}