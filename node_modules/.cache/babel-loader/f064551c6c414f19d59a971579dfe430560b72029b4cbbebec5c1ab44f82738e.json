{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState: {\n    // Load data\n    listProducts: [],\n    listCharacters: [],\n    // Random\n    // maxRequiredProducts: 5,\n    nameCorrectIndex: null,\n    requiredNumberProducts: 0,\n    // randomNameCorrect: '',\n    // Audio\n    audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n    audioFail: new Audio(\"/music/wrong.mp3\"),\n    // Countdown Time\n    levels: [],\n    timeStepPercentage: 10,\n    // Countdown\n    countdownTime: 3,\n    showCountdownModal: false,\n    intervalId: null,\n    showGameContent: false,\n    // Error\n    audioBackgroundPaused: false,\n    showErrorModal: false,\n    // Result\n    showResultGameModal: false,\n    finalScore: 0,\n    // Reset Answer\n    numberCorrect: 0,\n    // nameCorrectDesc: '',\n    numberCorrectDisplay: 'none',\n    initTimeRemainder: 100,\n    score: 0,\n    gameTime: {\n      timerInterval: null,\n      timeRemainder: 100,\n      timerRangeWidth: '100%',\n      timeStep: 10\n    },\n    gameSound: {\n      audioBackground: \"/music/bg_sound.mp3\",\n      audioFail: \"music/wrong.mp3\",\n      maxVolume: 1,\n      audioRatio: 1\n    },\n    // Update Level\n    currentScore: 0,\n    currentLevel: 1,\n    requiredProductNumber: 0\n    // timerRangeWidth: '100%',\n  },\n  reducers: {\n    // Load data\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    // Countdown Time\n    showCountdownTime(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        state.gameTime.timeRemainder = 0;\n        state.showErrorModal = true;\n      }\n      state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    // Thiết lập lại thời gian\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    // Dừng thời gian\n    pauseCountdownTime(state) {\n      state.gameTime.timeRemaining = state.gameTime.timeRemainder;\n      clearInterval(state.gameTime.timerInterval);\n      state.gameTime.timerInterval = null;\n      state.gameTime.timerRangeWidth = `${state.gameTime.timeRemaining / 100 * 100}%`;\n    },\n    // Countdown\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    // Error\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    // Result\n    showResultGame(state) {\n      state.showResultGameModal = true;\n      state.finalScore = state.currentScore;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n    },\n    //\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    clearGameInterval(state) {\n      if (state.intervalId) {\n        clearInterval(state.intervalId);\n        state.intervalId = null;\n      }\n    },\n    //\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame() {\n      // return initialState;\n      currentLevel = 0;\n    },\n    // setShowRandomProductName(state, action) {\n    //   state.requiredNumberProducts = action.payload; // Sửa từ requiredProductName thành requiredNumberProducts\n    // },\n\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    resetTimeRemainder: (state, action) => {\n      state.gameTime.timeRemainder = action.payload;\n    },\n    incrementNumberCorrect(state) {\n      state.numberCorrect += 1;\n    },\n    resetNumberCorrect(state) {\n      state.numberCorrect = 0;\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r, _state$listProducts$;\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      const maxRequiredProducts = 5;\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || ((_state$listProducts$ = state.listProducts[0]) === null || _state$listProducts$ === void 0 ? void 0 : _state$listProducts$.title) || '';\n    },\n    setAudioBackground: (state, action) => {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail: (state, action) => {\n      state.audioFail = new Audio(action.payload);\n    },\n    pauseAudio: state => {\n      state.audioBackground.pause();\n    },\n    playBackgroundSound: state => {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver: state => {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground: (state, action) => {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  clearGameInterval,\n  setTimerInterval,\n  showCountdownTime,\n  resetCountdownTime,\n  pauseCountdownTime,\n  showGameOver,\n  hideErrorModal,\n  showResultGame,\n  hideResultModal,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  // resetAnswer,\n  incrementNumberCorrect,\n  resetNumberCorrect,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground,\n  pauseAudio,\n  incrementScore,\n  updateGameLevel,\n  resetTimeRemainder\n} = gameSlice.actions;\nexport default gameSlice.reducer;","map":{"version":3,"names":["configureStore","createSlice","gameSlice","name","initialState","listProducts","listCharacters","nameCorrectIndex","requiredNumberProducts","audioBackground","Audio","audioFail","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","audioBackgroundPaused","showErrorModal","showResultGameModal","finalScore","numberCorrect","numberCorrectDisplay","initTimeRemainder","score","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","gameSound","maxVolume","audioRatio","currentScore","currentLevel","requiredProductNumber","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setTimerInterval","showCountdownTime","clearInterval","Math","max","setCountdownTime","resetCountdownTime","pauseCountdownTime","timeRemaining","toggleCountdownModal","showGameOver","hideErrorModal","showResultGame","incrementScore","updateGameLevel","floor","levelData","find","level","timeStepDenominator","setIntervalId","clearGameInterval","toggleGameContent","resetGame","setRandomProductNumber","setGameData","products","characters","resetTimeRemainder","incrementNumberCorrect","resetNumberCorrect","showRandomNameCorrect","_state$listProducts$r","_state$listProducts$","randomIndex","random","length","maxRequiredProducts","randomNameCorrect","title","setAudioBackground","setAudioFail","pauseAudio","pause","playBackgroundSound","play","catch","error","console","playSoundGameOver","playbackRateAudioBackground","playbackRate","hideResultModal","setShowRandomProductName","actions","reducer"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n initialState: {\r\n  // Load data\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  // Random\r\n  // maxRequiredProducts: 5,\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: 0,\r\n  // randomNameCorrect: '',\r\n  // Audio\r\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n  audioFail: new Audio(\"/music/wrong.mp3\"),\r\n  // Countdown Time\r\n  levels: [],\r\n  timeStepPercentage: 10,\r\n  // Countdown\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n  // Error\r\n  audioBackgroundPaused: false,\r\n  showErrorModal: false,\r\n  // Result\r\n  showResultGameModal: false,\r\n  finalScore: 0,\r\n  // Reset Answer\r\n  numberCorrect: 0,\r\n  // nameCorrectDesc: '',\r\n  numberCorrectDisplay: 'none',\r\n\r\n  initTimeRemainder: 100,\r\n\r\n  score: 0,\r\n\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: 100,\r\n    timerRangeWidth: '100%',\r\n    timeStep: 10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  // Update Level\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n\r\n  requiredProductNumber: 0,\r\n  // timerRangeWidth: '100%',\r\n},\r\n\r\n  reducers: {\r\n    // Load data\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setTimerInterval(state, action) {\r\n      state.gameTime.timerInterval = action.payload;\r\n    },\r\n    // Countdown Time\r\n    showCountdownTime(state) {\r\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n      if (state.gameTime.timeRemainder <= 0) {\r\n        clearInterval(state.gameTime.timerInterval);\r\n        state.gameTime.timeRemainder = 0;\r\n        state.showErrorModal = true;\r\n      }\r\n      state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    // Thiết lập lại thời gian\r\n    resetCountdownTime(state) {\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    // Dừng thời gian\r\n    pauseCountdownTime(state) {\r\n      state.gameTime.timeRemaining = state.gameTime.timeRemainder;\r\n      clearInterval(state.gameTime.timerInterval);\r\n\r\n      state.gameTime.timerInterval = null;\r\n      state.gameTime.timerRangeWidth = `${(state.gameTime.timeRemaining / 100) * 100}%`;\r\n    },\r\n    // Countdown\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    // Error\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    // Result\r\n    showResultGame(state) {\r\n      state.showResultGameModal = true;\r\n      state.finalScore = state.currentScore;\r\n    },\r\n \r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    updateGameLevel(state) {\r\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n      if (levelData) {\r\n        state.timeStepDenominator = levelData.timeStepPercentage;\r\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n      }\r\n    },\r\n    //\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    clearGameInterval(state) {\r\n      if (state.intervalId) {\r\n        clearInterval(state.intervalId);\r\n        state.intervalId = null;\r\n      }\r\n    },\r\n    //\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame() {\r\n      // return initialState;\r\n      currentLevel = 0;\r\n\r\n    },\r\n    // setShowRandomProductName(state, action) {\r\n    //   state.requiredNumberProducts = action.payload; // Sửa từ requiredProductName thành requiredNumberProducts\r\n    // },\r\n\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n    resetTimeRemainder: (state, action) => {\r\n      state.gameTime.timeRemainder = action.payload;\r\n    },\r\n    incrementNumberCorrect(state) {\r\n      state.numberCorrect += 1;\r\n    },\r\n    resetNumberCorrect(state) {\r\n      state.numberCorrect = 0;\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n      const maxRequiredProducts = 5;\r\n      state.nameCorrectIndex = randomIndex;\r\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n      state.randomNameCorrect = state.listProducts[randomIndex]?.title || state.listProducts[0]?.title || '';\r\n    },\r\n    setAudioBackground: (state, action) => {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail: (state, action) => {\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    pauseAudio: (state) => { state.audioBackground.pause(); },\r\n\r\n    playBackgroundSound: (state) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver: (state) => {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground: (state, action) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n\r\n  setIntervalId,\r\n  clearGameInterval,\r\n\r\n  setTimerInterval,\r\n  showCountdownTime,\r\n  resetCountdownTime,\r\n  pauseCountdownTime,\r\n\r\n  showGameOver,\r\n  hideErrorModal,\r\n\r\n  showResultGame,\r\n  hideResultModal,\r\n\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  showRandomNameCorrect,\r\n\r\n  // resetAnswer,\r\n  incrementNumberCorrect,\r\n  resetNumberCorrect,\r\n\r\n  setAudioFail,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n  pauseAudio,\r\n\r\n  incrementScore,\r\n  updateGameLevel,\r\n\r\n  resetTimeRemainder,\r\n} = gameSlice.actions;\r\n\r\nexport default gameSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}