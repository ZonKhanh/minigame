{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  listProducts: [],\n  listCharacters: [],\n  nameCorrectIndex: null,\n  requiredNumberProducts: null,\n  randomNameCorrect: '',\n  correctProduct: '',\n  numberCorrect: {},\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n  audioFail: new Audio(\"/music/wrong.mp3\"),\n  levels: [],\n  timeStepPercentage: [],\n  // Đếm ngươc\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  // Báo lỗi\n  showErrorModal: false,\n  // Reset Answer\n  numberCorrect: 0,\n  nameCorrectDesc: '',\n  numberCorrectDisplay: 'none',\n  initTimeRemainder: 100,\n  playTimes: 5,\n  maxRequiredProducts: 5,\n  answerDone: false,\n  // timeStepDenominator: 10,\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: '100%',\n    timerRangeWidth: '100%',\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  // Tính điểm\n  currentScore: 0,\n  currentLevel: 1\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setCorrectProduct(state, action) {\n      state.correctProduct = action.payload;\n    },\n    incrementProductCount(state, action) {\n      const productName = action.payload;\n      if (!state.numberCorrect[productName]) {\n        state.numberCorrect[productName] = 0;\n      }\n      state.numberCorrect[productName] += 1;\n    },\n    resetProductCount(state) {\n      state.numberCorrect = {};\n    },\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    decrementTimeRemainder(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        state.gameTime.timeRemainder = 0;\n        state.showErrorModal = true;\n      }\n      state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n    },\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame(state) {\n      return initialState;\n    },\n    setShowRandomProductName(state, action) {\n      state.requiredProductName = action.payload;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    // handleCorrectAnswer(state, action) {\n    //   const { productCard } = action.payload;\n    //   const newValue = state.score + 1;\n    //   state.score = newValue;\n    //   productCard.numberCorrect += 1;\n    //   if (newValue > state.requiredNumberProducts) {\n    //     state.showGameOver = true;\n    //   } else if (newValue === state.requiredNumberProducts) {\n    //     state.resetAnswer();\n    //     state.randomNameCorrect();\n    //     state.showScoreCalculator();\n    //     state.getAnswer();\n    //     state.countdownTime();\n    //   }\n    // },\n    // handleIncorrectAnswer(state) {\n    //   state.showGameOver = true;\n    //   state.audioBackground.pause();\n    //   state.audioFail.play();\n    // },\n    resetAnswer: state => {\n      state.numberCorrect = {};\n      state.correctProduct = '';\n      clearInterval(state.gameTime.timerInterval);\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r;\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      const maxRequiredProducts = 5;\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || '';\n    },\n    setAudioBackground: (state, action) => {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail: (state, action) => {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound: state => {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver: state => {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground: (state, action) => {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  setCorrectProduct,\n  incrementProductCount,\n  resetProductCount,\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  setTimerInterval,\n  decrementTimeRemainder,\n  resetCountdownTime,\n  showGameOver,\n  hideErrorModal,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  // handleCorrectAnswer,\n  // handleIncorrectAnswer,\n  resetAnswer,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground,\n  incrementScore,\n  updateGameLevel\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","listProducts","listCharacters","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","correctProduct","numberCorrect","audioBackground","Audio","audioFail","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","showErrorModal","nameCorrectDesc","numberCorrectDisplay","initTimeRemainder","playTimes","maxRequiredProducts","answerDone","score","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","gameSound","maxVolume","audioRatio","currentScore","currentLevel","gameSlice","name","reducers","setCorrectProduct","state","action","payload","incrementProductCount","productName","resetProductCount","updateProducts","updateCharacters","updateLevels","updateTimeStepPercentage","setTimerInterval","decrementTimeRemainder","clearInterval","Math","max","setCountdownTime","resetCountdownTime","toggleCountdownModal","showGameOver","hideErrorModal","incrementScore","updateGameLevel","floor","levelData","find","level","timeStepDenominator","setIntervalId","toggleGameContent","resetGame","setShowRandomProductName","requiredProductName","setRandomProductNumber","requiredProductNumber","setGameData","products","characters","resetAnswer","showRandomNameCorrect","_state$listProducts$r","randomIndex","random","length","title","setAudioBackground","setAudioFail","playBackgroundSound","play","catch","error","console","playSoundGameOver","playbackRateAudioBackground","playbackRate","actions","store","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: null,\r\n  randomNameCorrect: '',\r\n\r\n  correctProduct: '',\r\n  numberCorrect: {},\r\n\r\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n  audioFail: new Audio(\"/music/wrong.mp3\"),\r\n  levels: [],\r\n  timeStepPercentage: [],\r\n  // Đếm ngươc\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n  // Báo lỗi\r\n  showErrorModal: false,\r\n\r\n  // Reset Answer\r\n  numberCorrect: 0,\r\n  nameCorrectDesc: '',\r\n  numberCorrectDisplay: 'none',\r\n\r\n  initTimeRemainder: 100,\r\n  playTimes: 5,\r\n  maxRequiredProducts: 5,\r\n  answerDone: false,\r\n  // timeStepDenominator: 10,\r\n  score: 0,\r\n\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: '100%',\r\n    timerRangeWidth: '100%',\r\n    timeStep:  10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  // Tính điểm\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n\r\n  reducers: {\r\n    setCorrectProduct(state, action) {\r\n      state.correctProduct = action.payload;\r\n    },\r\n    incrementProductCount(state, action) {\r\n      const productName = action.payload;\r\n      if (!state.numberCorrect[productName]) {\r\n        state.numberCorrect[productName] = 0;\r\n      }\r\n      state.numberCorrect[productName] += 1;\r\n    },\r\n    resetProductCount(state) {\r\n      state.numberCorrect = {};\r\n    },\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setTimerInterval(state, action) {\r\n      state.gameTime.timerInterval = action.payload;\r\n    },\r\n    decrementTimeRemainder(state) {\r\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n      if (state.gameTime.timeRemainder <= 0) {\r\n        clearInterval(state.gameTime.timerInterval);\r\n        state.gameTime.timeRemainder = 0;\r\n        state.showErrorModal = true;\r\n      }\r\n     state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    resetCountdownTime(state) {\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    updateGameLevel(state) {\r\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n      if (levelData) {\r\n        state.timeStepDenominator = levelData.timeStepPercentage;\r\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n      }\r\n    },\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame(state) {\r\n      return initialState;\r\n    },\r\n    setShowRandomProductName(state, action) {\r\n      state.requiredProductName = action.payload;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n\r\n    // handleCorrectAnswer(state, action) {\r\n    //   const { productCard } = action.payload;\r\n    //   const newValue = state.score + 1;\r\n    //   state.score = newValue;\r\n    //   productCard.numberCorrect += 1;\r\n    //   if (newValue > state.requiredNumberProducts) {\r\n    //     state.showGameOver = true;\r\n    //   } else if (newValue === state.requiredNumberProducts) {\r\n    //     state.resetAnswer();\r\n    //     state.randomNameCorrect();\r\n    //     state.showScoreCalculator();\r\n    //     state.getAnswer();\r\n    //     state.countdownTime();\r\n    //   }\r\n    // },\r\n    // handleIncorrectAnswer(state) {\r\n    //   state.showGameOver = true;\r\n    //   state.audioBackground.pause();\r\n    //   state.audioFail.play();\r\n    // },\r\n    resetAnswer: (state) => {\r\n      state.numberCorrect = {};\r\n      state.correctProduct = '';\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n      const maxRequiredProducts = 5;\r\n      state.nameCorrectIndex = randomIndex;\r\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n      state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n    },\r\n    setAudioBackground: (state, action) => {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail: (state, action) => {\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    playBackgroundSound: (state) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver: (state) => {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground: (state, action) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n\r\n  },\r\n});\r\n\r\nexport const {\r\n\r\n  setCorrectProduct,\r\n  incrementProductCount,\r\n  resetProductCount,\r\n\r\n  \r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n  setIntervalId,\r\n\r\n  setTimerInterval,\r\n  decrementTimeRemainder,\r\n  resetCountdownTime,\r\n\r\n  showGameOver,\r\n  hideErrorModal,\r\n\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  showRandomNameCorrect,\r\n\r\n  // handleCorrectAnswer,\r\n  // handleIncorrectAnswer,\r\n  resetAnswer,\r\n\r\n  setAudioFail,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n\r\n  incrementScore,\r\n  updateGameLevel,\r\n\r\n} = gameSlice.actions;\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}