{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  // Load data\n  listProducts: [],\n  listCharacters: [],\n  // Random\n  maxRequiredProducts: 5,\n  nameCorrectIndex: 0,\n  requiredNumberProducts: 0,\n  randomNameCorrect: '',\n  // Audio\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n  audioFail: new Audio(\"/music/wrong.mp3\"),\n  // Countdown Time\n  levels: [],\n  timeStepPercentage: 10,\n  // Countdown\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  // Error\n  audioBackgroundPaused: false,\n  showErrorModal: false,\n  // Result\n  showResultGameModal: false,\n  finalScore: 0,\n  // Reset Answer\n  numberCorrect: 0,\n  nameCorrectDesc: '',\n  numberCorrectDisplay: 'none',\n  initTimeRemainder: 100,\n  // playTimes: 5,\n  // maxRequiredProducts: 5,\n  // answerDone: false,\n\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timerRangeWidth: '100%',\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  // Update Level\n  currentScore: 0,\n  currentLevel: 1\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    // Load data\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    // Countdown Time\n    showCountdownTime(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        // state.gameTime.timeRemainder = 0;\n        state.showErrorModal = true;\n      }\n      state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    // Thiết lập lại thời gian\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    // pauseCountdownTime(state) {\n    //   clearInterval(state.gameTime.timerInterval);\n    // },\n    // Countdown\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    // Error\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    // Result\n    showResultGame(state) {\n      state.showResultGameModal = true;\n      state.finalScore = state.currentScore;\n    },\n    // hideResultModal(state) {\n    //   state.showResultGameModal = false;\n    // },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n    },\n    //\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    clearGameInterval(state) {\n      if (state.intervalId) {\n        clearInterval(state.intervalId);\n        state.intervalId = null;\n      }\n    },\n    //\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame() {\n      return initialState;\n    },\n    setShowRandomProductName(state, action) {\n      state.requiredProductName = action.payload;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    resetTimeRemainder: (state, action) => {\n      state.gameTime.timeRemainder = action.payload;\n    },\n    // resetAnswer(state) {\n    //   state.numberCorrect = 0;\n    //   state.nameCorrectDesc = '';\n    //   state.numberCorrectDisplay = 'none';\n    //   state.gameTime.timeRemainder = state.initTimeRemainder;\n    //   state.timerRangeWidth = '100%';\n    //   clearInterval(state.gameTime.timerInterval);\n    // },\n    incrementNumberCorrect(state) {\n      state.numberCorrect += 1;\n    },\n    resetNumberCorrect(state) {\n      state.numberCorrect = 0;\n    },\n    showRandomNameCorrect: (state, action) => {\n      var _state$listProducts$r;\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      const maxRequiredProducts = 5;\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || '';\n    },\n    setAudioBackground: (state, action) => {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail: (state, action) => {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound: state => {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver: state => {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground: (state, action) => {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  clearGameInterval,\n  setTimerInterval,\n  showCountdownTime,\n  resetCountdownTime,\n  pauseCountdownTime,\n  showGameOver,\n  hideErrorModal,\n  showResultGame,\n  hideResultModal,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  // resetAnswer,\n  incrementNumberCorrect,\n  resetNumberCorrect,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground,\n  incrementScore,\n  updateGameLevel,\n  resetTimeRemainder\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","listProducts","listCharacters","maxRequiredProducts","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","audioBackground","Audio","audioFail","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","audioBackgroundPaused","showErrorModal","showResultGameModal","finalScore","numberCorrect","nameCorrectDesc","numberCorrectDisplay","initTimeRemainder","score","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","gameSound","maxVolume","audioRatio","currentScore","currentLevel","gameSlice","name","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setTimerInterval","showCountdownTime","clearInterval","Math","max","setCountdownTime","resetCountdownTime","toggleCountdownModal","showGameOver","hideErrorModal","showResultGame","incrementScore","updateGameLevel","floor","levelData","find","level","timeStepDenominator","setIntervalId","clearGameInterval","toggleGameContent","resetGame","setShowRandomProductName","requiredProductName","setRandomProductNumber","requiredProductNumber","setGameData","products","characters","resetTimeRemainder","incrementNumberCorrect","resetNumberCorrect","showRandomNameCorrect","_state$listProducts$r","randomIndex","random","length","title","setAudioBackground","setAudioFail","playBackgroundSound","play","catch","error","console","playSoundGameOver","playbackRateAudioBackground","playbackRate","pauseCountdownTime","hideResultModal","actions","store","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  // Load data\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  // Random\r\n  maxRequiredProducts: 5,\r\n  nameCorrectIndex: 0,\r\n  requiredNumberProducts: 0,\r\n  randomNameCorrect: '',\r\n  // Audio\r\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n  audioFail: new Audio(\"/music/wrong.mp3\"),\r\n  // Countdown Time\r\n  levels: [],\r\n  timeStepPercentage: 10,\r\n  // Countdown\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n  // Error\r\n  audioBackgroundPaused: false,\r\n  showErrorModal: false,\r\n  // Result\r\n  showResultGameModal: false,\r\n  finalScore: 0,\r\n  // Reset Answer\r\n  numberCorrect: 0,\r\n  nameCorrectDesc: '',\r\n  numberCorrectDisplay: 'none',\r\n\r\n  initTimeRemainder: 100,\r\n  // playTimes: 5,\r\n  // maxRequiredProducts: 5,\r\n  // answerDone: false,\r\n\r\n  score: 0,\r\n\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: 100,\r\n    timerRangeWidth: '100%',\r\n    timeStep: 10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  // Update Level\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n\r\n  reducers: {\r\n    // Load data\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setTimerInterval(state, action) {\r\n      state.gameTime.timerInterval = action.payload;\r\n    },\r\n    // Countdown Time\r\n    showCountdownTime(state) {\r\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n      if (state.gameTime.timeRemainder <= 0) {\r\n        clearInterval(state.gameTime.timerInterval);\r\n        // state.gameTime.timeRemainder = 0;\r\n        state.showErrorModal = true;\r\n      }\r\n     state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    // Thiết lập lại thời gian\r\n    resetCountdownTime(state) {\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    // pauseCountdownTime(state) {\r\n    //   clearInterval(state.gameTime.timerInterval);\r\n    // },\r\n    // Countdown\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    // Error\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    // Result\r\n    showResultGame(state) {\r\n      state.showResultGameModal = true;\r\n      state.finalScore = state.currentScore;\r\n    },\r\n    // hideResultModal(state) {\r\n    //   state.showResultGameModal = false;\r\n    // },\r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    updateGameLevel(state) {\r\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n      if (levelData) {\r\n        state.timeStepDenominator = levelData.timeStepPercentage;\r\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n      }\r\n    },\r\n    //\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    clearGameInterval(state) {\r\n      if (state.intervalId) {\r\n        clearInterval(state.intervalId);\r\n        state.intervalId = null;\r\n      }\r\n    },\r\n    //\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame() {\r\n      return initialState;\r\n    },\r\n    setShowRandomProductName(state, action) {\r\n      state.requiredProductName = action.payload;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n    resetTimeRemainder: (state, action) => {\r\n      state.gameTime.timeRemainder = action.payload;\r\n    },\r\n    // resetAnswer(state) {\r\n    //   state.numberCorrect = 0;\r\n    //   state.nameCorrectDesc = '';\r\n    //   state.numberCorrectDisplay = 'none';\r\n    //   state.gameTime.timeRemainder = state.initTimeRemainder;\r\n    //   state.timerRangeWidth = '100%';\r\n    //   clearInterval(state.gameTime.timerInterval);\r\n    // },\r\n    incrementNumberCorrect(state) {\r\n      state.numberCorrect += 1;\r\n    },\r\n    resetNumberCorrect(state) {\r\n      state.numberCorrect = 0;\r\n    },\r\n    showRandomNameCorrect: (state, action) => {\r\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n      const maxRequiredProducts = 5;\r\n      state.nameCorrectIndex = randomIndex;\r\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n      state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n    },\r\n    setAudioBackground: (state, action) => {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail: (state, action) => {\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    playBackgroundSound: (state) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver: (state) => {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground: (state, action) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n\r\n  setIntervalId,\r\n  clearGameInterval,\r\n\r\n  setTimerInterval,\r\n  showCountdownTime,\r\n  resetCountdownTime,\r\n  pauseCountdownTime,\r\n\r\n  showGameOver,\r\n  hideErrorModal,\r\n\r\n  showResultGame,\r\n  hideResultModal,\r\n\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  showRandomNameCorrect,\r\n\r\n\r\n  // resetAnswer,\r\n  incrementNumberCorrect,\r\n  resetNumberCorrect,\r\n\r\n  setAudioFail,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n\r\n  incrementScore,\r\n  updateGameLevel,\r\n\r\n  resetTimeRemainder,\r\n} = gameSlice.actions;\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}