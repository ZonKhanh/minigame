{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  listProducts: [],\n  listCharacters: [],\n  nameCorrectIndex: null,\n  requiredNumberProducts: null,\n  randomNameCorrect: '',\n  levels: [],\n  timeStepPercentage: [],\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  audioBackgroundPaused: false,\n  showErrorModal: false,\n  showResultGameModal: false,\n  finalScore: 0,\n  numberCorrect: 0,\n  nameCorrectDesc: '',\n  numberCorrectDisplay: 'none',\n  initTimeRemainder: 100,\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timerRangeWidth: '100%',\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"/music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  currentScore: 0,\n  currentLevel: 1\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    showCountdownTime(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      state.gameTime.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 10, 0) + '%';\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        state.showErrorModal = true;\n      }\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    showResultGame(state) {\n      state.showResultGameModal = true;\n      state.finalScore = state.currentScore;\n    },\n    hideResultModal(state) {\n      state.showResultGameModal = false;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n    },\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    clearGameInterval(state) {\n      if (state.intervalId) {\n        clearInterval(state.intervalId);\n        state.intervalId = null;\n      }\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame(state) {\n      return initialState;\n    },\n    setShowRandomProductName(state, action) {\n      state.requiredProductName = action.payload;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    handleCorrectAnswer(state, action) {\n      const {\n        productId\n      } = action.payload;\n      if (!state.productsCorrectCount[productId]) {\n        state.productsCorrectCount[productId] = 0;\n      }\n      state.productsCorrectCount[productId] += 1;\n      state.productDisplayState[productId] = 'flex';\n      if (state.productsCorrectCount[productId] > state.requiredNumberProducts) {\n        state.showErrorModal = true;\n      } else if (state.productsCorrectCount[productId] === state.requiredNumberProducts) {\n        setTimeout(() => {\n          var _state$listProducts$r;\n          state.numberCorrect = 0;\n          state.nameCorrectDesc = '';\n          state.numberCorrectDisplay = 'none';\n          state.gameTime.timeRemainder = state.initTimeRemainder;\n          state.timerRangeWidth = '100%';\n          clearInterval(state.gameTime.timerInterval);\n          const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n          const maxRequiredProducts = 5;\n          state.nameCorrectIndex = randomIndex;\n          state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n          state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || '';\n          state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n          const levelData = state.levels.find(level => level.level === state.currentLevel);\n          if (levelData) {\n            state.timeStepDenominator = levelData.timeStepPercentage;\n            state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n          }\n        }, 300);\n      }\n    },\n    handleIncorrectAnswer(state) {\n      state.showErrorModal = true;\n      state.audioFail.play().catch(error => {\n        console.error('Audio play failed:', error);\n      });\n    },\n    resetAnswer(state) {\n      state.numberCorrect = 0;\n      state.nameCorrectDesc = '';\n      state.numberCorrectDisplay = 'none';\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r2;\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      const maxRequiredProducts = 5;\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r2 = state.listProducts[randomIndex]) === null || _state$listProducts$r2 === void 0 ? void 0 : _state$listProducts$r2.title) || '';\n    },\n    setAudioBackground: (state, action) => {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail: (state, action) => {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound(state) {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver(state) {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground(state, action) {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  clearGameInterval,\n  setTimerInterval,\n  showCountdownTime,\n  resetCountdownTime,\n  showGameOver,\n  hideErrorModal,\n  showResultGame,\n  hideResultModal,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  handleCorrectAnswer,\n  handleIncorrectAnswer,\n  resetAnswer,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground,\n  incrementScore,\n  updateGameLevel\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","listProducts","listCharacters","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","audioBackgroundPaused","showErrorModal","showResultGameModal","finalScore","numberCorrect","nameCorrectDesc","numberCorrectDisplay","initTimeRemainder","score","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","gameSound","audioBackground","audioFail","maxVolume","audioRatio","currentScore","currentLevel","gameSlice","name","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setTimerInterval","showCountdownTime","Math","max","clearInterval","setCountdownTime","resetCountdownTime","toggleCountdownModal","showGameOver","hideErrorModal","showResultGame","hideResultModal","incrementScore","updateGameLevel","floor","levelData","find","level","timeStepDenominator","setIntervalId","clearGameInterval","toggleGameContent","resetGame","setShowRandomProductName","requiredProductName","setRandomProductNumber","requiredProductNumber","setGameData","products","characters","handleCorrectAnswer","productId","productsCorrectCount","productDisplayState","setTimeout","_state$listProducts$r","randomIndex","random","length","maxRequiredProducts","title","handleIncorrectAnswer","play","catch","error","console","resetAnswer","showRandomNameCorrect","_state$listProducts$r2","setAudioBackground","Audio","setAudioFail","playBackgroundSound","playSoundGameOver","playbackRateAudioBackground","playbackRate","actions","store","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: null,\r\n  randomNameCorrect: '',\r\n  levels: [],\r\n  timeStepPercentage: [],\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n  audioBackgroundPaused: false,\r\n  showErrorModal: false,\r\n  showResultGameModal: false,\r\n  finalScore: 0,\r\n  numberCorrect: 0,\r\n  nameCorrectDesc: '',\r\n  numberCorrectDisplay: 'none',\r\n  initTimeRemainder: 100,\r\n  score: 0,\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: 100,\r\n    timerRangeWidth: '100%',\r\n    timeStep: 10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"/music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n  reducers: {\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setTimerInterval(state, action) {\r\n      state.gameTime.timerInterval = action.payload;\r\n    },\r\n    showCountdownTime(state) {\r\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n      state.gameTime.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 10, 0) + '%';\r\n      if (state.gameTime.timeRemainder <= 0) {\r\n        clearInterval(state.gameTime.timerInterval);\r\n        state.showErrorModal = true;\r\n      }\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    resetCountdownTime(state) {\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    showResultGame(state) {\r\n      state.showResultGameModal = true;\r\n      state.finalScore = state.currentScore;\r\n    },\r\n    hideResultModal(state) {\r\n      state.showResultGameModal = false;\r\n    },\r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    updateGameLevel(state) {\r\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n      if (levelData) {\r\n        state.timeStepDenominator = levelData.timeStepPercentage;\r\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n      }\r\n    },\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    clearGameInterval(state) {\r\n      if (state.intervalId) {\r\n        clearInterval(state.intervalId);\r\n        state.intervalId = null;\r\n      }\r\n    },\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame(state) {\r\n      return initialState;\r\n    },\r\n    setShowRandomProductName(state, action) {\r\n      state.requiredProductName = action.payload;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n    handleCorrectAnswer(state, action) {\r\n      const { productId } = action.payload;\r\n      if (!state.productsCorrectCount[productId]) {\r\n        state.productsCorrectCount[productId] = 0;\r\n      }\r\n      state.productsCorrectCount[productId] += 1;\r\n      state.productDisplayState[productId] = 'flex';\r\n\r\n      if (state.productsCorrectCount[productId] > state.requiredNumberProducts) {\r\n        state.showErrorModal = true;\r\n      } else if (state.productsCorrectCount[productId] === state.requiredNumberProducts) {\r\n        setTimeout(() => {\r\n          state.numberCorrect = 0;\r\n          state.nameCorrectDesc = '';\r\n          state.numberCorrectDisplay = 'none';\r\n          state.gameTime.timeRemainder = state.initTimeRemainder;\r\n          state.timerRangeWidth = '100%';\r\n          clearInterval(state.gameTime.timerInterval);\r\n\r\n          const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n          const maxRequiredProducts = 5;\r\n          state.nameCorrectIndex = randomIndex;\r\n          state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n          state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n\r\n          state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n          const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n          if (levelData) {\r\n            state.timeStepDenominator = levelData.timeStepPercentage;\r\n            state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n          }\r\n        }, 300);\r\n      }\r\n    },\r\n    handleIncorrectAnswer(state) {\r\n      state.showErrorModal = true;\r\n      state.audioFail.play().catch(error => {\r\n        console.error('Audio play failed:', error);\r\n      });\r\n    },\r\n    resetAnswer(state) {\r\n      state.numberCorrect = 0;\r\n      state.nameCorrectDesc = '';\r\n      state.numberCorrectDisplay = 'none';\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n      const maxRequiredProducts = 5;\r\n      state.nameCorrectIndex = randomIndex;\r\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n      state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n    },\r\n    setAudioBackground: (state, action) => {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail: (state, action) => {\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    playBackgroundSound(state) {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver(state) {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground(state, action) {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n  setIntervalId,\r\n  clearGameInterval,\r\n  setTimerInterval,\r\n  showCountdownTime,\r\n  resetCountdownTime,\r\n  showGameOver,\r\n  hideErrorModal,\r\n  showResultGame,\r\n  hideResultModal,\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  showRandomNameCorrect,\r\n  handleCorrectAnswer,\r\n  handleIncorrectAnswer,\r\n  resetAnswer,\r\n  setAudioFail,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n  incrementScore,\r\n  updateGameLevel,\r\n} = gameSlice.actions;\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,EAAE;EAClBC,gBAAgB,EAAE,IAAI;EACtBC,sBAAsB,EAAE,IAAI;EAC5BC,iBAAiB,EAAE,EAAE;EACrBC,MAAM,EAAE,EAAE;EACVC,kBAAkB,EAAE,EAAE;EACtBC,aAAa,EAAE,CAAC;EAChBC,kBAAkB,EAAE,KAAK;EACzBC,UAAU,EAAE,IAAI;EAChBC,eAAe,EAAE,KAAK;EACtBC,qBAAqB,EAAE,KAAK;EAC5BC,cAAc,EAAE,KAAK;EACrBC,mBAAmB,EAAE,KAAK;EAC1BC,UAAU,EAAE,CAAC;EACbC,aAAa,EAAE,CAAC;EAChBC,eAAe,EAAE,EAAE;EACnBC,oBAAoB,EAAE,MAAM;EAC5BC,iBAAiB,EAAE,GAAG;EACtBC,KAAK,EAAE,CAAC;EACRC,QAAQ,EAAE;IACRC,aAAa,EAAE,IAAI;IACnBC,aAAa,EAAE,GAAG;IAClBC,eAAe,EAAE,MAAM;IACvBC,QAAQ,EAAE;EACZ,CAAC;EACDC,SAAS,EAAE;IACTC,eAAe,EAAE,qBAAqB;IACtCC,SAAS,EAAE,kBAAkB;IAC7BC,SAAS,EAAE,CAAC;IACZC,UAAU,EAAE;EACd,CAAC;EACDC,YAAY,EAAE,CAAC;EACfC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,SAAS,GAAGlC,WAAW,CAAC;EAC5BmC,IAAI,EAAE,MAAM;EACZlC,YAAY;EACZmC,QAAQ,EAAE;IACRC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC5BD,KAAK,CAACpC,YAAY,GAAGqC,MAAM,CAACC,OAAO;IACrC,CAAC;IACDC,gBAAgBA,CAACH,KAAK,EAAEC,MAAM,EAAE;MAC9BD,KAAK,CAACnC,cAAc,GAAGoC,MAAM,CAACC,OAAO;IACvC,CAAC;IACDE,YAAYA,CAACJ,KAAK,EAAEC,MAAM,EAAE;MAC1BD,KAAK,CAAC/B,MAAM,GAAGgC,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDG,wBAAwBA,CAACL,KAAK,EAAEC,MAAM,EAAE;MACtCD,KAAK,CAAC9B,kBAAkB,GAAG+B,MAAM,CAACC,OAAO;IAC3C,CAAC;IACDI,gBAAgBA,CAACN,KAAK,EAAEC,MAAM,EAAE;MAC9BD,KAAK,CAAChB,QAAQ,CAACC,aAAa,GAAGgB,MAAM,CAACC,OAAO;IAC/C,CAAC;IACDK,iBAAiBA,CAACP,KAAK,EAAE;MACvBA,KAAK,CAAChB,QAAQ,CAACE,aAAa,IAAIc,KAAK,CAAChB,QAAQ,CAACI,QAAQ;MACvDY,KAAK,CAAChB,QAAQ,CAACG,eAAe,GAAGqB,IAAI,CAACC,GAAG,CAACT,KAAK,CAAChB,QAAQ,CAACE,aAAa,GAAGc,KAAK,CAAChB,QAAQ,CAACI,QAAQ,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG;MAC/G,IAAIY,KAAK,CAAChB,QAAQ,CAACE,aAAa,IAAI,CAAC,EAAE;QACrCwB,aAAa,CAACV,KAAK,CAAChB,QAAQ,CAACC,aAAa,CAAC;QAC3Ce,KAAK,CAACxB,cAAc,GAAG,IAAI;MAC7B;IACF,CAAC;IACDmC,gBAAgBA,CAACX,KAAK,EAAEC,MAAM,EAAE;MAC9BD,KAAK,CAAC7B,aAAa,GAAG8B,MAAM,CAACC,OAAO;IACtC,CAAC;IACDU,kBAAkBA,CAACZ,KAAK,EAAE;MACxBA,KAAK,CAAChB,QAAQ,CAACE,aAAa,GAAGc,KAAK,CAAClB,iBAAiB;MACtDkB,KAAK,CAACb,eAAe,GAAG,MAAM;MAC9BuB,aAAa,CAACV,KAAK,CAAChB,QAAQ,CAACC,aAAa,CAAC;IAC7C,CAAC;IACD4B,oBAAoBA,CAACb,KAAK,EAAEC,MAAM,EAAE;MAClCD,KAAK,CAAC5B,kBAAkB,GAAG6B,MAAM,CAACC,OAAO;IAC3C,CAAC;IACDY,YAAYA,CAACd,KAAK,EAAE;MAClBU,aAAa,CAACV,KAAK,CAAChB,QAAQ,CAACC,aAAa,CAAC;MAC3Ce,KAAK,CAACxB,cAAc,GAAG,IAAI;IAC7B,CAAC;IACDuC,cAAcA,CAACf,KAAK,EAAE;MACpBA,KAAK,CAACxB,cAAc,GAAG,KAAK;IAC9B,CAAC;IACDwC,cAAcA,CAAChB,KAAK,EAAE;MACpBA,KAAK,CAACvB,mBAAmB,GAAG,IAAI;MAChCuB,KAAK,CAACtB,UAAU,GAAGsB,KAAK,CAACN,YAAY;IACvC,CAAC;IACDuB,eAAeA,CAACjB,KAAK,EAAE;MACrBA,KAAK,CAACvB,mBAAmB,GAAG,KAAK;IACnC,CAAC;IACDyC,cAAcA,CAAClB,KAAK,EAAE;MACpBA,KAAK,CAACN,YAAY,IAAI,CAAC;IACzB,CAAC;IACDyB,eAAeA,CAACnB,KAAK,EAAE;MACrBA,KAAK,CAACL,YAAY,GAAGa,IAAI,CAACY,KAAK,CAACpB,KAAK,CAACN,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC;MAC3D,MAAM2B,SAAS,GAAGrB,KAAK,CAAC/B,MAAM,CAACqD,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACA,KAAK,KAAKvB,KAAK,CAACL,YAAY,CAAC;MAChF,IAAI0B,SAAS,EAAE;QACbrB,KAAK,CAACwB,mBAAmB,GAAGH,SAAS,CAACnD,kBAAkB;QACxD8B,KAAK,CAAChB,QAAQ,CAACI,QAAQ,GAAGY,KAAK,CAAClB,iBAAiB,IAAI,GAAG,GAAGkB,KAAK,CAACwB,mBAAmB,CAAC;MACvF;IACF,CAAC;IACDC,aAAaA,CAACzB,KAAK,EAAEC,MAAM,EAAE;MAC3BD,KAAK,CAAC3B,UAAU,GAAG4B,MAAM,CAACC,OAAO;IACnC,CAAC;IACDwB,iBAAiBA,CAAC1B,KAAK,EAAE;MACvB,IAAIA,KAAK,CAAC3B,UAAU,EAAE;QACpBqC,aAAa,CAACV,KAAK,CAAC3B,UAAU,CAAC;QAC/B2B,KAAK,CAAC3B,UAAU,GAAG,IAAI;MACzB;IACF,CAAC;IACDsD,iBAAiBA,CAAC3B,KAAK,EAAEC,MAAM,EAAE;MAC/BD,KAAK,CAAC1B,eAAe,GAAG2B,MAAM,CAACC,OAAO;IACxC,CAAC;IACD0B,SAASA,CAAC5B,KAAK,EAAE;MACf,OAAOrC,YAAY;IACrB,CAAC;IACDkE,wBAAwBA,CAAC7B,KAAK,EAAEC,MAAM,EAAE;MACtCD,KAAK,CAAC8B,mBAAmB,GAAG7B,MAAM,CAACC,OAAO;IAC5C,CAAC;IACD6B,sBAAsBA,CAAC/B,KAAK,EAAEC,MAAM,EAAE;MACpCD,KAAK,CAACgC,qBAAqB,GAAG/B,MAAM,CAACC,OAAO;IAC9C,CAAC;IACD+B,WAAWA,CAACjC,KAAK,EAAEC,MAAM,EAAE;MACzBD,KAAK,CAACpC,YAAY,GAAGqC,MAAM,CAACC,OAAO,CAACgC,QAAQ;MAC5ClC,KAAK,CAACnC,cAAc,GAAGoC,MAAM,CAACC,OAAO,CAACiC,UAAU;MAChDnC,KAAK,CAAC/B,MAAM,GAAGgC,MAAM,CAACC,OAAO,CAACjC,MAAM;IACtC,CAAC;IACDmE,mBAAmBA,CAACpC,KAAK,EAAEC,MAAM,EAAE;MACjC,MAAM;QAAEoC;MAAU,CAAC,GAAGpC,MAAM,CAACC,OAAO;MACpC,IAAI,CAACF,KAAK,CAACsC,oBAAoB,CAACD,SAAS,CAAC,EAAE;QAC1CrC,KAAK,CAACsC,oBAAoB,CAACD,SAAS,CAAC,GAAG,CAAC;MAC3C;MACArC,KAAK,CAACsC,oBAAoB,CAACD,SAAS,CAAC,IAAI,CAAC;MAC1CrC,KAAK,CAACuC,mBAAmB,CAACF,SAAS,CAAC,GAAG,MAAM;MAE7C,IAAIrC,KAAK,CAACsC,oBAAoB,CAACD,SAAS,CAAC,GAAGrC,KAAK,CAACjC,sBAAsB,EAAE;QACxEiC,KAAK,CAACxB,cAAc,GAAG,IAAI;MAC7B,CAAC,MAAM,IAAIwB,KAAK,CAACsC,oBAAoB,CAACD,SAAS,CAAC,KAAKrC,KAAK,CAACjC,sBAAsB,EAAE;QACjFyE,UAAU,CAAC,MAAM;UAAA,IAAAC,qBAAA;UACfzC,KAAK,CAACrB,aAAa,GAAG,CAAC;UACvBqB,KAAK,CAACpB,eAAe,GAAG,EAAE;UAC1BoB,KAAK,CAACnB,oBAAoB,GAAG,MAAM;UACnCmB,KAAK,CAAChB,QAAQ,CAACE,aAAa,GAAGc,KAAK,CAAClB,iBAAiB;UACtDkB,KAAK,CAACb,eAAe,GAAG,MAAM;UAC9BuB,aAAa,CAACV,KAAK,CAAChB,QAAQ,CAACC,aAAa,CAAC;UAE3C,MAAMyD,WAAW,GAAGlC,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACmC,MAAM,CAAC,CAAC,GAAG3C,KAAK,CAACpC,YAAY,CAACgF,MAAM,CAAC;UACzE,MAAMC,mBAAmB,GAAG,CAAC;UAC7B7C,KAAK,CAAClC,gBAAgB,GAAG4E,WAAW;UACpC1C,KAAK,CAACjC,sBAAsB,GAAGyC,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACmC,MAAM,CAAC,CAAC,GAAGE,mBAAmB,CAAC,GAAG,CAAC;UAClF7C,KAAK,CAAChC,iBAAiB,GAAG,EAAAyE,qBAAA,GAAAzC,KAAK,CAACpC,YAAY,CAAC8E,WAAW,CAAC,cAAAD,qBAAA,uBAA/BA,qBAAA,CAAiCK,KAAK,KAAI,EAAE;UAEtE9C,KAAK,CAACL,YAAY,GAAGa,IAAI,CAACY,KAAK,CAACpB,KAAK,CAACN,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC;UAC3D,MAAM2B,SAAS,GAAGrB,KAAK,CAAC/B,MAAM,CAACqD,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACA,KAAK,KAAKvB,KAAK,CAACL,YAAY,CAAC;UAChF,IAAI0B,SAAS,EAAE;YACbrB,KAAK,CAACwB,mBAAmB,GAAGH,SAAS,CAACnD,kBAAkB;YACxD8B,KAAK,CAAChB,QAAQ,CAACI,QAAQ,GAAGY,KAAK,CAAClB,iBAAiB,IAAI,GAAG,GAAGkB,KAAK,CAACwB,mBAAmB,CAAC;UACvF;QACF,CAAC,EAAE,GAAG,CAAC;MACT;IACF,CAAC;IACDuB,qBAAqBA,CAAC/C,KAAK,EAAE;MAC3BA,KAAK,CAACxB,cAAc,GAAG,IAAI;MAC3BwB,KAAK,CAACT,SAAS,CAACyD,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;QACpCC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C,CAAC,CAAC;IACJ,CAAC;IACDE,WAAWA,CAACpD,KAAK,EAAE;MACjBA,KAAK,CAACrB,aAAa,GAAG,CAAC;MACvBqB,KAAK,CAACpB,eAAe,GAAG,EAAE;MAC1BoB,KAAK,CAACnB,oBAAoB,GAAG,MAAM;MACnCmB,KAAK,CAAChB,QAAQ,CAACE,aAAa,GAAGc,KAAK,CAAClB,iBAAiB;MACtDkB,KAAK,CAACb,eAAe,GAAG,MAAM;MAC9BuB,aAAa,CAACV,KAAK,CAAChB,QAAQ,CAACC,aAAa,CAAC;IAC7C,CAAC;IACDoE,qBAAqBA,CAACrD,KAAK,EAAE;MAAA,IAAAsD,sBAAA;MAC3B,MAAMZ,WAAW,GAAGlC,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACmC,MAAM,CAAC,CAAC,GAAG3C,KAAK,CAACpC,YAAY,CAACgF,MAAM,CAAC;MACzE,MAAMC,mBAAmB,GAAG,CAAC;MAC7B7C,KAAK,CAAClC,gBAAgB,GAAG4E,WAAW;MACpC1C,KAAK,CAACjC,sBAAsB,GAAGyC,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACmC,MAAM,CAAC,CAAC,GAAGE,mBAAmB,CAAC,GAAG,CAAC;MAClF7C,KAAK,CAAChC,iBAAiB,GAAG,EAAAsF,sBAAA,GAAAtD,KAAK,CAACpC,YAAY,CAAC8E,WAAW,CAAC,cAAAY,sBAAA,uBAA/BA,sBAAA,CAAiCR,KAAK,KAAI,EAAE;IACxE,CAAC;IACDS,kBAAkB,EAAEA,CAACvD,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAACV,eAAe,GAAG,IAAIkE,KAAK,CAACvD,MAAM,CAACC,OAAO,CAAC;IACnD,CAAC;IACDuD,YAAY,EAAEA,CAACzD,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACT,SAAS,GAAG,IAAIiE,KAAK,CAACvD,MAAM,CAACC,OAAO,CAAC;IAC7C,CAAC;IACDwD,mBAAmBA,CAAC1D,KAAK,EAAE;MACzB,IAAIA,KAAK,CAACV,eAAe,EAAE;QACzBU,KAAK,CAACV,eAAe,CAAC0D,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;UAC1CC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC5C,CAAC,CAAC;MACJ;IACF,CAAC;IACDS,iBAAiBA,CAAC3D,KAAK,EAAE;MACvB,IAAIA,KAAK,CAACT,SAAS,EAAE;QACnBS,KAAK,CAACT,SAAS,CAACyD,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;UACpCC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC5C,CAAC,CAAC;MACJ;IACF,CAAC;IACDU,2BAA2BA,CAAC5D,KAAK,EAAEC,MAAM,EAAE;MACzC,IAAID,KAAK,CAACV,eAAe,EAAE;QACzBU,KAAK,CAACV,eAAe,CAACuE,YAAY,GAAG5D,MAAM,CAACC,OAAO;MACrD;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,cAAc;EACdI,gBAAgB;EAChBC,YAAY;EACZC,wBAAwB;EACxBuB,SAAS;EACTjB,gBAAgB;EAChBE,oBAAoB;EACpBY,aAAa;EACbC,iBAAiB;EACjBpB,gBAAgB;EAChBC,iBAAiB;EACjBK,kBAAkB;EAClBE,YAAY;EACZC,cAAc;EACdC,cAAc;EACdC,eAAe;EACfU,iBAAiB;EACjBE,wBAAwB;EACxBE,sBAAsB;EACtBE,WAAW;EACXoB,qBAAqB;EACrBjB,mBAAmB;EACnBW,qBAAqB;EACrBK,WAAW;EACXK,YAAY;EACZC,mBAAmB;EACnBC,iBAAiB;EACjBC,2BAA2B;EAC3B1C,cAAc;EACdC;AACF,CAAC,GAAGvB,SAAS,CAACkE,OAAO;AAErB,OAAO,MAAMC,KAAK,GAAGtG,cAAc,CAAC;EAClCuG,OAAO,EAAE;IACPC,IAAI,EAAErE,SAAS,CAACoE;EAClB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}