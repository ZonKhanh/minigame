{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst gameContentModalInitialState = {\n  nameCorrectIndex: null,\n  requiredNumberProducts: 0,\n  randomNameCorrect: '',\n  listProducts: [],\n  listCharacters: [],\n  levels: [],\n  timeStepPercentage: [],\n  currentScore: 0,\n  currentLevel: 1,\n  requiredProductNumber: 0,\n  numberCorrect: 0,\n  numberCorrectDisplay: 'none',\n  initTimeRemainder: 100,\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timerRangeWidth: '100%',\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  }\n};\nconst gameContentModalSlice = createSlice({\n  name: 'gameContentModal',\n  initialState: gameContentModalInitialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r, _state$listProducts$;\n      const maxRequiredProducts = 5;\n      let randomIndex;\n      if (state.nameCorrectIndex !== undefined) {\n        do {\n          randomIndex = Math.floor(Math.random() * state.listProducts.length);\n        } while (randomIndex === state.nameCorrectIndex);\n      } else {\n        randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      }\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || ((_state$listProducts$ = state.listProducts[0]) === null || _state$listProducts$ === void 0 ? void 0 : _state$listProducts$.title) || '';\n    },\n    incrementNumberCorrect(state) {\n      state.numberCorrect += 1;\n    },\n    resetNumberCorrect(state) {\n      state.numberCorrect = 0;\n    },\n    resetBug(state) {\n      state.randomNameCorrect = '';\n      state.requiredNumberProducts = 0;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    setAudioBackground(state, action) {\n      state.audioBackground = new Audio(action.payload);\n      state.audioBackground.playbackRate = state.gameSound.audioRatio;\n    },\n    setAudioFail(state, action) {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound(state) {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = state.gameSound.audioRatio;\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver(state) {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground(state, action) {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  toggleGameContent,\n  setGameData,\n  showRandomNameCorrect\n} = gameContentModalSlice.actions;\nexport default gameContentModalSlice.reducer;","map":{"version":3,"names":["createSlice","gameContentModalInitialState","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","listProducts","listCharacters","levels","timeStepPercentage","currentScore","currentLevel","requiredProductNumber","numberCorrect","numberCorrectDisplay","initTimeRemainder","score","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","gameSound","audioBackground","audioFail","maxVolume","audioRatio","gameContentModalSlice","name","initialState","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","showRandomNameCorrect","_state$listProducts$r","_state$listProducts$","maxRequiredProducts","randomIndex","undefined","Math","floor","random","length","title","incrementNumberCorrect","resetNumberCorrect","resetBug","incrementScore","updateGameLevel","levelData","find","level","timeStepDenominator","setRandomProductNumber","setGameData","products","characters","setAudioBackground","Audio","playbackRate","setAudioFail","playBackgroundSound","play","catch","error","console","playSoundGameOver","playbackRateAudioBackground","toggleGameContent","actions","reducer"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/backup/minigame-react/src/components/GameContentModal/GameContentModalSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst gameContentModalInitialState = {\r\n    nameCorrectIndex: null,\r\n    requiredNumberProducts: 0,\r\n    randomNameCorrect: '',\r\n    listProducts: [],\r\n    listCharacters: [],\r\n    levels: [],\r\n    timeStepPercentage: [],\r\n    currentScore: 0,\r\n    currentLevel: 1,\r\n    requiredProductNumber: 0,\r\n    numberCorrect: 0,\r\n    numberCorrectDisplay: 'none',\r\n    initTimeRemainder: 100,\r\n    score: 0,\r\n    gameTime: {\r\n      timerInterval: null,\r\n      timeRemainder: 100,\r\n      timerRangeWidth: '100%',\r\n      timeStep: 10,\r\n    },\r\n    gameSound: {\r\n      audioBackground: \"/music/bg_sound.mp3\",\r\n      audioFail: \"music/wrong.mp3\",\r\n      maxVolume: 1,\r\n      audioRatio: 1,\r\n    },\r\n  };\r\n  \r\n  const gameContentModalSlice = createSlice({\r\n    name: 'gameContentModal',\r\n    initialState: gameContentModalInitialState,\r\n    reducers: {\r\n      updateProducts(state, action) {\r\n        state.listProducts = action.payload;\r\n      },\r\n      updateCharacters(state, action) {\r\n        state.listCharacters = action.payload;\r\n      },\r\n      updateLevels(state, action) {\r\n        state.levels = action.payload;\r\n      },\r\n      updateTimeStepPercentage(state, action) {\r\n        state.timeStepPercentage = action.payload;\r\n      },\r\n      showRandomNameCorrect(state) {\r\n        const maxRequiredProducts = 5;\r\n        let randomIndex;\r\n        if (state.nameCorrectIndex !== undefined) {\r\n          do {\r\n            randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n          } while (randomIndex === state.nameCorrectIndex);\r\n        } else {\r\n          randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n        }\r\n        state.nameCorrectIndex = randomIndex;\r\n        state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n        state.randomNameCorrect = state.listProducts[randomIndex]?.title || state.listProducts[0]?.title || '';\r\n      },\r\n      incrementNumberCorrect(state) {\r\n        state.numberCorrect += 1;\r\n      },\r\n      resetNumberCorrect(state) {\r\n        state.numberCorrect = 0;\r\n      },\r\n      resetBug(state) {\r\n        state.randomNameCorrect = '';\r\n        state.requiredNumberProducts = 0;\r\n      },\r\n      incrementScore(state) {\r\n        state.currentScore += 1;\r\n      },\r\n      updateGameLevel(state) {\r\n        state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n        const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n        if (levelData) {\r\n          state.timeStepDenominator = levelData.timeStepPercentage;\r\n          state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n        }\r\n      },\r\n      setRandomProductNumber(state, action) {\r\n        state.requiredProductNumber = action.payload;\r\n      },\r\n      setGameData(state, action) {\r\n        state.listProducts = action.payload.products;\r\n        state.listCharacters = action.payload.characters;\r\n        state.levels = action.payload.levels;\r\n      },\r\n      setAudioBackground(state, action) {\r\n        state.audioBackground = new Audio(action.payload);\r\n        state.audioBackground.playbackRate = state.gameSound.audioRatio;\r\n      },\r\n      setAudioFail(state, action) {\r\n        state.audioFail = new Audio(action.payload);\r\n      },\r\n      playBackgroundSound(state) {\r\n        if (state.audioBackground) {\r\n          state.audioBackground.playbackRate = state.gameSound.audioRatio;\r\n          state.audioBackground.play().catch(error => {\r\n            console.error('Audio play failed:', error);\r\n          });\r\n        }\r\n      },\r\n      playSoundGameOver(state) {\r\n        if (state.audioFail) {\r\n          state.audioFail.play().catch(error => {\r\n            console.error('Audio play failed:', error);\r\n          });\r\n        }\r\n      },\r\n      playbackRateAudioBackground(state, action) {\r\n        if (state.audioBackground) {\r\n          state.audioBackground.playbackRate = action.payload;\r\n        }\r\n      },\r\n    },\r\n  });\r\n\r\nexport const { \r\n    toggleGameContent, \r\n    setGameData, \r\n    showRandomNameCorrect \r\n} = gameContentModalSlice.actions;\r\n\r\nexport default gameContentModalSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}