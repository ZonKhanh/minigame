{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  listProducts: [],\n  listCharacters: [],\n  nameCorrectIndex: null,\n  requiredNumberProducts: null,\n  randomNameCorrect: '',\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n  audioFail: new Audio(\"/music/wrong.mp3\"),\n  levels: [],\n  timeStepPercentage: [],\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  showErrorModal: false,\n  initTimeRemainder: 100,\n  playTimes: 5,\n  maxRequiredProducts: 5,\n  answerDone: false,\n  timeStepDenominator: 10,\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timerRangeWidth: '100%',\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  currentScore: 0,\n  currentLevel: 1\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    decrementTimeRemainder(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        state.gameTime.timeRemainder = 0;\n        state.showErrorModal = true;\n      }\n      state.timerRangeWidth = state.gameTime.timeRemainder + '%';\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n    },\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame(state) {\n      return initialState;\n    },\n    setShowRandomProductName(state, action) {\n      state.requiredProductName = action.payload;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    handleCorrectAnswer(state, action) {\n      const {\n        productCardIndex\n      } = action.payload;\n      state.listProducts[productCardIndex].numberCorrect += 1;\n      const newValue = state.listProducts[productCardIndex].numberCorrect;\n      if (newValue > state.requiredNumberProducts) {\n        state.showErrorModal = true;\n      } else if (newValue === state.requiredNumberProducts) {\n        state.gameTime.timerInterval = null;\n        state.gameTime.timeRemainder = state.initTimeRemainder;\n        state.timerRangeWidth = '100%';\n        setTimeout(() => {\n          var _state$listProducts$s;\n          state.listProducts.forEach(product => product.numberCorrect = 0);\n          state.nameCorrectIndex = Math.floor(Math.random() * state.listProducts.length);\n          state.requiredNumberProducts = Math.floor(Math.random() * state.maxRequiredProducts) + 1;\n          state.randomNameCorrect = ((_state$listProducts$s = state.listProducts[state.nameCorrectIndex]) === null || _state$listProducts$s === void 0 ? void 0 : _state$listProducts$s.title) || '';\n          state.currentScore += 1;\n        }, 300);\n      }\n    },\n    handleIncorrectAnswer(state) {\n      state.showErrorModal = true;\n      state.audioBackground.pause();\n      state.audioFail.play();\n    },\n    resetAnswer(state) {\n      state.listProducts.forEach(product => product.numberCorrect = 0);\n      state.nameCorrectDesc = '';\n      state.numberCorrectVisible = false;\n      state.gameTime.timerInterval = null;\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r;\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * state.maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || '';\n    },\n    setAudioBackground: (state, action) => {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail: (state, action) => {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound: state => {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver: state => {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground: (state, action) => {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  setTimerInterval,\n  decrementTimeRemainder,\n  resetCountdownTime,\n  showGameOver,\n  hideErrorModal,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  handleCorrectAnswer,\n  handleIncorrectAnswer,\n  resetAnswer,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground,\n  incrementScore,\n  updateGameLevel\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","listProducts","listCharacters","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","audioBackground","Audio","audioFail","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","showErrorModal","initTimeRemainder","playTimes","maxRequiredProducts","answerDone","timeStepDenominator","score","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","gameSound","maxVolume","audioRatio","currentScore","currentLevel","gameSlice","name","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setTimerInterval","decrementTimeRemainder","clearInterval","setCountdownTime","resetCountdownTime","toggleCountdownModal","showGameOver","hideErrorModal","incrementScore","updateGameLevel","Math","floor","levelData","find","level","setIntervalId","toggleGameContent","resetGame","setShowRandomProductName","requiredProductName","setRandomProductNumber","requiredProductNumber","setGameData","products","characters","handleCorrectAnswer","productCardIndex","numberCorrect","newValue","setTimeout","_state$listProducts$s","forEach","product","random","length","title","handleIncorrectAnswer","pause","play","resetAnswer","nameCorrectDesc","numberCorrectVisible","showRandomNameCorrect","_state$listProducts$r","randomIndex","setAudioBackground","setAudioFail","playBackgroundSound","catch","error","console","playSoundGameOver","playbackRateAudioBackground","playbackRate","actions","store","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: null,\r\n  randomNameCorrect: '',\r\n\r\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n  audioFail: new Audio(\"/music/wrong.mp3\"),\r\n  levels: [],\r\n  timeStepPercentage: [],\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n  showErrorModal: false,\r\n\r\n  initTimeRemainder: 100,\r\n  playTimes: 5,\r\n  maxRequiredProducts: 5,\r\n  answerDone: false,\r\n  timeStepDenominator: 10,\r\n  score: 0,\r\n\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: 100,\r\n    timerRangeWidth: '100%',\r\n    timeStep: 10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n\r\n  reducers: {\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setTimerInterval(state, action) {\r\n      state.gameTime.timerInterval = action.payload;\r\n    },\r\n    decrementTimeRemainder(state) {\r\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n      if (state.gameTime.timeRemainder <= 0) {\r\n        clearInterval(state.gameTime.timerInterval);\r\n        state.gameTime.timeRemainder = 0;\r\n        state.showErrorModal = true;\r\n      }\r\n      state.timerRangeWidth = state.gameTime.timeRemainder + '%';\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    resetCountdownTime(state) {\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    updateGameLevel(state) {\r\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n      if (levelData) {\r\n        state.timeStepDenominator = levelData.timeStepPercentage;\r\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n      }\r\n    },\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame(state) {\r\n      return initialState;\r\n    },\r\n    setShowRandomProductName(state, action) {\r\n      state.requiredProductName = action.payload;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n\r\n    handleCorrectAnswer(state, action) {\r\n      const { productCardIndex } = action.payload;\r\n      state.listProducts[productCardIndex].numberCorrect += 1;\r\n      const newValue = state.listProducts[productCardIndex].numberCorrect;\r\n\r\n      if (newValue > state.requiredNumberProducts) {\r\n        state.showErrorModal = true;\r\n      } else if (newValue === state.requiredNumberProducts) {\r\n        state.gameTime.timerInterval = null;\r\n        state.gameTime.timeRemainder = state.initTimeRemainder;\r\n        state.timerRangeWidth = '100%';\r\n\r\n        setTimeout(() => {\r\n          state.listProducts.forEach(product => product.numberCorrect = 0);\r\n          state.nameCorrectIndex = Math.floor(Math.random() * state.listProducts.length);\r\n          state.requiredNumberProducts = Math.floor(Math.random() * state.maxRequiredProducts) + 1;\r\n          state.randomNameCorrect = state.listProducts[state.nameCorrectIndex]?.title || '';\r\n          state.currentScore += 1;\r\n        }, 300);\r\n      }\r\n    },\r\n    handleIncorrectAnswer(state) {\r\n      state.showErrorModal = true;\r\n      state.audioBackground.pause();\r\n      state.audioFail.play();\r\n    },\r\n    resetAnswer(state) {\r\n      state.listProducts.forEach(product => product.numberCorrect = 0);\r\n      state.nameCorrectDesc = '';\r\n      state.numberCorrectVisible = false;\r\n      state.gameTime.timerInterval = null;\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n      state.nameCorrectIndex = randomIndex;\r\n      state.requiredNumberProducts = Math.floor(Math.random() * state.maxRequiredProducts) + 1;\r\n      state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n    },\r\n    setAudioBackground: (state, action) => {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail: (state, action) => {\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    playBackgroundSound: (state) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver: (state) => {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground: (state, action) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n  setIntervalId,\r\n\r\n  setTimerInterval,\r\n  decrementTimeRemainder,\r\n  resetCountdownTime,\r\n\r\n  showGameOver,\r\n  hideErrorModal,\r\n\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  showRandomNameCorrect,\r\n\r\n  handleCorrectAnswer,\r\n  handleIncorrectAnswer,\r\n  resetAnswer,\r\n\r\n  setAudioFail,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n\r\n  incrementScore,\r\n  updateGameLevel,\r\n} = gameSlice.actions;\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}