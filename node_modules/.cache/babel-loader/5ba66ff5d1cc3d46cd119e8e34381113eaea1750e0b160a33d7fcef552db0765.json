{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  listProducts: [],\n  listCharacters: [],\n  nameCorrectIndex: null,\n  requiredNumberProducts: null,\n  randomNameCorrect: '',\n  audioBackground: null,\n  levels: [],\n  timeStepPercentage: [],\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  initTimeRemainder: 100,\n  playTimes: 5,\n  maxRequiredProducts: 5,\n  answerDone: false,\n  timeStepDenominator: 10,\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"../../src/assets/music/bg_sound.mp3\",\n    audioFail: \"../../src/assets/music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  currentScore: 0,\n  currentLevel: 1\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame(state) {\n      return initialState;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    incrementLevel(state) {\n      state.currentLevel += 1;\n    },\n    setShowRandomProductName(state, action) {\n      state.requiredProductName = action.payload;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    handleCorrectAnswer: (state, action) => {\n      const {\n        productCard\n      } = action.payload;\n      const newValue = state.score + 1;\n      state.score = newValue;\n      // Cập nhật số lượng sản phẩm đúng đã chọn và hiển thị lên giao diện\n      productCard.numberCorrect += 1;\n\n      // Kiểm tra nếu người chơi chọn quá số lượng yêu cầu\n      if (newValue > state.requiredNumberProducts) {\n        state.showGameOver = true;\n      } else if (newValue === state.requiredNumberProducts) {\n        // Nếu đủ số lượng yêu cầu, reset và chuẩn bị cho câu hỏi tiếp theo\n        state.resetAnswer();\n        state.showRandomNameCorrect();\n        state.showScoreCalculator();\n        state.getAnswer();\n        state.showCountdownTime();\n      }\n    },\n    handleIncorrectAnswer: state => {\n      console.log('You choosed incorrect!');\n      state.showGameOver = true;\n      // Cập nhật logic xử lý khi người chơi chọn sai\n    },\n    resetAnswer: state => {\n      state.score = 0;\n      // Đặt lại câu trả lời\n      state.requiredNumberProducts = null;\n      state.randomNameCorrect = '';\n      state.gameTime.timeRemainder = state.gameTime.initTimeRemainder;\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r;\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      const maxRequiredProducts = 5;\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || '';\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  incrementScore,\n  incrementLevel,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  handleCorrectAnswer,\n  handleIncorrectAnswer,\n  resetAnswer\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","listProducts","listCharacters","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","audioBackground","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","initTimeRemainder","playTimes","maxRequiredProducts","answerDone","timeStepDenominator","score","gameTime","timerInterval","timeRemainder","timeStep","gameSound","audioFail","maxVolume","audioRatio","currentScore","currentLevel","gameSlice","name","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setCountdownTime","toggleCountdownModal","setIntervalId","toggleGameContent","resetGame","incrementScore","incrementLevel","setShowRandomProductName","requiredProductName","setRandomProductNumber","requiredProductNumber","setGameData","products","characters","handleCorrectAnswer","productCard","newValue","numberCorrect","showGameOver","resetAnswer","showRandomNameCorrect","showScoreCalculator","getAnswer","showCountdownTime","handleIncorrectAnswer","console","log","_state$listProducts$r","randomIndex","Math","floor","random","length","title","actions","store","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: null,\r\n  randomNameCorrect: '',\r\n\r\n  audioBackground: null, \r\n\r\n  levels: [],\r\n  timeStepPercentage: [],\r\n\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n\r\n  initTimeRemainder: 100,\r\n  playTimes: 5,\r\n  maxRequiredProducts: 5,\r\n  answerDone: false,\r\n  timeStepDenominator: 10,\r\n  score: 0,\r\n\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: 100,\r\n    timeStep: 10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"../../src/assets/music/bg_sound.mp3\",\r\n    audioFail: \"../../src/assets/music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n\r\n  reducers: {\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame(state) {\r\n      return initialState;\r\n    },\r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    incrementLevel(state) {\r\n      state.currentLevel += 1;\r\n    },\r\n    setShowRandomProductName(state, action) {\r\n      state.requiredProductName = action.payload;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n   \r\n     handleCorrectAnswer: (state, action) => {\r\n      const { productCard } = action.payload;\r\n      const newValue = state.score + 1;\r\n      state.score = newValue;\r\n      // Cập nhật số lượng sản phẩm đúng đã chọn và hiển thị lên giao diện\r\n      productCard.numberCorrect += 1;\r\n\r\n      // Kiểm tra nếu người chơi chọn quá số lượng yêu cầu\r\n      if (newValue > state.requiredNumberProducts) {\r\n        state.showGameOver = true;\r\n      } else if (newValue === state.requiredNumberProducts) {\r\n        // Nếu đủ số lượng yêu cầu, reset và chuẩn bị cho câu hỏi tiếp theo\r\n        state.resetAnswer();\r\n        state.showRandomNameCorrect();\r\n        state.showScoreCalculator();\r\n        state.getAnswer();\r\n        state.showCountdownTime();\r\n      }\r\n    },\r\n    handleIncorrectAnswer: (state) => {\r\n      console.log('You choosed incorrect!');\r\n      state.showGameOver = true;\r\n      // Cập nhật logic xử lý khi người chơi chọn sai\r\n    },\r\n    resetAnswer: (state) => {\r\n      state.score = 0;\r\n      // Đặt lại câu trả lời\r\n      state.requiredNumberProducts = null;\r\n      state.randomNameCorrect = '';\r\n      state.gameTime.timeRemainder = state.gameTime.initTimeRemainder;\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n      const maxRequiredProducts = 5;\r\n      state.nameCorrectIndex = randomIndex;\r\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n      state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n  incrementScore,\r\n  incrementLevel,\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n  setIntervalId,\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n \r\n  showRandomNameCorrect, \r\n  handleCorrectAnswer,\r\n  handleIncorrectAnswer,\r\n  resetAnswer,\r\n} = gameSlice.actions;\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}