{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  listProducts: [],\n  listCharacters: [],\n  nameCorrectIndex: null,\n  requiredNumberProducts: null,\n  randomNameCorrect: '',\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n  audioFail: new Audio(\"/music/wrong.mp3\"),\n  levels: [],\n  timeStepPercentage: [],\n  // Đếm ngươc\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  // Báo lỗi\n  showErrorModal: false,\n  // Reset Answer\n  numberCorrect: 0,\n  nameCorrectDesc: '',\n  numberCorrectDisplay: 'none',\n  initTimeRemainder: 100,\n  playTimes: 5,\n  maxRequiredProducts: 5,\n  answerDone: false,\n  // timeStepDenominator: 10,\n  score: 0,\n  timerRangeWidth: '100%',\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  // Tính điểm\n  currentScore: 0,\n  currentLevel: 1\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    decrementTimeRemainder(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        state.gameTime.timeRemainder = 0;\n        state.showErrorModal = true;\n      }\n      // Cập nhật timerRangeWidth dựa trên phần trăm của thời gian còn lại\n      const totalTime = state.initTimeRemainder;\n      state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / totalTime * 100, 0) + '%';\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n    },\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame(state) {\n      return initialState;\n    },\n    setShowRandomProductName(state, action) {\n      state.requiredProductName = action.payload;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    handleCorrectAnswer(state, action) {\n      const {\n        productCard\n      } = action.payload;\n      const newValue = state.score + 1;\n      state.score = newValue;\n      productCard.numberCorrect += 1;\n      if (newValue > state.requiredNumberProducts) {\n        state.showGameOver = true;\n      } else if (newValue === state.requiredNumberProducts) {\n        state.resetAnswer();\n        state.showRandomNameCorrect();\n        state.showScoreCalculator();\n        state.getAnswer();\n        state.setCountdownTime();\n      }\n    },\n    handleIncorrectAnswer(state) {\n      state.showGameOver = true;\n      state.audioBackground.pause();\n      state.audioFail.play();\n    },\n    resetAnswer: state => {\n      state.numberCorrect = 0;\n      state.nameCorrectDesc = '';\n      state.numberCorrectDisplay = 'none';\n      clearInterval(state.gameTime.timerInterval);\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = state.gameTime.timeRemainder + \"%\";\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r;\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      const maxRequiredProducts = 5;\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || '';\n    },\n    setAudioBackground: (state, action) => {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail: (state, action) => {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound: state => {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver: state => {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground: (state, action) => {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  setTimerInterval,\n  decrementTimeRemainder,\n  resetCountdownTime,\n  showGameOver,\n  hideErrorModal,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  handleCorrectAnswer,\n  handleIncorrectAnswer,\n  resetAnswer,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground,\n  incrementScore,\n  updateGameLevel\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","listProducts","listCharacters","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","audioBackground","Audio","audioFail","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","showErrorModal","numberCorrect","nameCorrectDesc","numberCorrectDisplay","initTimeRemainder","playTimes","maxRequiredProducts","answerDone","score","timerRangeWidth","gameTime","timerInterval","timeRemainder","timeStep","gameSound","maxVolume","audioRatio","currentScore","currentLevel","gameSlice","name","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setTimerInterval","decrementTimeRemainder","clearInterval","totalTime","Math","max","setCountdownTime","resetCountdownTime","toggleCountdownModal","showGameOver","hideErrorModal","incrementScore","updateGameLevel","floor","levelData","find","level","timeStepDenominator","setIntervalId","toggleGameContent","resetGame","setShowRandomProductName","requiredProductName","setRandomProductNumber","requiredProductNumber","setGameData","products","characters","handleCorrectAnswer","productCard","newValue","resetAnswer","showRandomNameCorrect","showScoreCalculator","getAnswer","handleIncorrectAnswer","pause","play","_state$listProducts$r","randomIndex","random","length","title","setAudioBackground","setAudioFail","playBackgroundSound","catch","error","console","playSoundGameOver","playbackRateAudioBackground","playbackRate","actions","store","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: null,\r\n  randomNameCorrect: '',\r\n\r\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n  audioFail: new Audio(\"/music/wrong.mp3\"),\r\n  levels: [],\r\n  timeStepPercentage: [],\r\n  // Đếm ngươc\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n  // Báo lỗi\r\n  showErrorModal: false,\r\n\r\n  // Reset Answer\r\n  numberCorrect: 0,\r\n  nameCorrectDesc: '',\r\n  numberCorrectDisplay: 'none',\r\n\r\n  initTimeRemainder: 100,\r\n  playTimes: 5,\r\n  maxRequiredProducts: 5,\r\n  answerDone: false,\r\n  // timeStepDenominator: 10,\r\n  score: 0,\r\n    timerRangeWidth: '100%',\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: 100, \r\n\r\n    timeStep:  10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  // Tính điểm\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n\r\n  reducers: {\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setTimerInterval(state, action) {\r\n      state.gameTime.timerInterval = action.payload;\r\n    },\r\n    decrementTimeRemainder(state) {\r\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n      if (state.gameTime.timeRemainder <= 0) {\r\n        clearInterval(state.gameTime.timerInterval);\r\n        state.gameTime.timeRemainder = 0;\r\n        state.showErrorModal = true;\r\n      }\r\n      // Cập nhật timerRangeWidth dựa trên phần trăm của thời gian còn lại\r\n      const totalTime = state.initTimeRemainder;\r\n      state.timerRangeWidth = Math.max((state.gameTime.timeRemainder / totalTime) * 100, 0) + '%';\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    resetCountdownTime(state) {\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    updateGameLevel(state) {\r\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n      if (levelData) {\r\n        state.timeStepDenominator = levelData.timeStepPercentage;\r\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n      }\r\n    },\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame(state) {\r\n      return initialState;\r\n    },\r\n    setShowRandomProductName(state, action) {\r\n      state.requiredProductName = action.payload;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n\r\n    handleCorrectAnswer(state, action) {\r\n      const { productCard } = action.payload;\r\n      const newValue = state.score + 1;\r\n      state.score = newValue;\r\n      productCard.numberCorrect += 1;\r\n      if (newValue > state.requiredNumberProducts) {\r\n        state.showGameOver = true;\r\n      } else if (newValue === state.requiredNumberProducts) {\r\n        state.resetAnswer();\r\n        state.showRandomNameCorrect();\r\n        state.showScoreCalculator();\r\n        state.getAnswer();\r\n        state.setCountdownTime();\r\n      }\r\n    },\r\n    handleIncorrectAnswer(state) {\r\n      state.showGameOver = true;\r\n      state.audioBackground.pause();\r\n      state.audioFail.play();\r\n    },\r\n    resetAnswer: (state) => {\r\n      state.numberCorrect = 0;\r\n      state.nameCorrectDesc = '';\r\n      state.numberCorrectDisplay = 'none';\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = state.gameTime.timeRemainder + \"%\";\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n      const maxRequiredProducts = 5;\r\n      state.nameCorrectIndex = randomIndex;\r\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n      state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n    },\r\n    setAudioBackground: (state, action) => {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail: (state, action) => {\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    playBackgroundSound: (state) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver: (state) => {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground: (state, action) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n  setIntervalId,\r\n\r\n  setTimerInterval,\r\n  decrementTimeRemainder,\r\n  resetCountdownTime,\r\n\r\n  showGameOver,\r\n  hideErrorModal,\r\n\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  showRandomNameCorrect,\r\n\r\n  handleCorrectAnswer,\r\n  handleIncorrectAnswer,\r\n  resetAnswer,\r\n\r\n  setAudioFail,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n\r\n  incrementScore,\r\n  updateGameLevel,\r\n\r\n} = gameSlice.actions;\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}