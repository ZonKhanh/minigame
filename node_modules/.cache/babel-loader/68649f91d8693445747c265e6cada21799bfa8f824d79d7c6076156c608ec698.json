{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  listProducts: [],\n  listCharacters: [],\n  nameCorrectIndex: null,\n  requiredNumberProducts: 0,\n  randomNameCorrect: '',\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n  audioFail: new Audio(\"/music/wrong.mp3\"),\n  levels: [],\n  timeStepPercentage: 10,\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  audioBackgroundPaused: false,\n  showErrorModal: false,\n  showResultGameModal: false,\n  finalScore: 0,\n  numberCorrect: 0,\n  numberCorrectDisplay: 'none',\n  initTimeRemainder: 100,\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timerRangeWidth: '100%',\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  currentScore: 0,\n  currentLevel: 1,\n  requiredProductNumber: 0\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    showCountdownTime(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        state.gameTime.timeRemainder = 0;\n        state.showErrorModal = true;\n      }\n      state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    pauseCountdownTime(state) {\n      state.gameTime.timeRemaining = state.gameTime.timeRemainder;\n      clearInterval(state.gameTime.timerInterval);\n      state.gameTime.timerInterval = null;\n      state.gameTime.timerRangeWidth = `${state.gameTime.timeRemaining / 100 * 100}%`;\n    },\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    showResultGame(state) {\n      state.showResultGameModal = true;\n      state.finalScore = state.currentScore;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepPercentage = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepPercentage);\n      }\n    },\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    clearGameInterval(state) {\n      if (state.intervalId) {\n        clearInterval(state.intervalId);\n        state.intervalId = null;\n      }\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame() {\n      return initialState;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    resetTimeRemainder(state, action) {\n      state.gameTime.timeRemainder = action.payload;\n    },\n    incrementNumberCorrect(state) {\n      state.numberCorrect += 1;\n    },\n    resetNumberCorrect(state) {\n      state.numberCorrect = 0;\n    },\n    showRandomNameCorrect(state) {\n      if (state.listProducts.length > 0) {\n        var _state$listProducts$r;\n        const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n        const maxRequiredProducts = 5;\n        state.nameCorrectIndex = randomIndex;\n        state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n        state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || '';\n      } else {\n        console.error('listProducts is empty');\n      }\n    },\n    setAudioBackground(state, action) {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail(state, action) {\n      state.audioFail = new Audio(action.payload);\n    },\n    pauseAudio(state) {\n      state.audioBackground.pause();\n    },\n    playBackgroundSound(state) {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver(state) {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground(state, action) {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  clearGameInterval,\n  setTimerInterval,\n  showCountdownTime,\n  resetCountdownTime,\n  pauseCountdownTime,\n  showGameOver,\n  hideErrorModal,\n  showResultGame,\n  incrementScore,\n  updateGameLevel,\n  toggleGameContent,\n  resetTimeRemainder,\n  setRandomProductNumber,\n  setGameData,\n  incrementNumberCorrect,\n  resetNumberCorrect,\n  showRandomNameCorrect,\n  setAudioBackground,\n  setAudioFail,\n  pauseAudio,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","listProducts","listCharacters","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","audioBackground","Audio","audioFail","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","audioBackgroundPaused","showErrorModal","showResultGameModal","finalScore","numberCorrect","numberCorrectDisplay","initTimeRemainder","score","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","gameSound","maxVolume","audioRatio","currentScore","currentLevel","requiredProductNumber","gameSlice","name","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setTimerInterval","showCountdownTime","clearInterval","Math","max","setCountdownTime","resetCountdownTime","pauseCountdownTime","timeRemaining","toggleCountdownModal","showGameOver","hideErrorModal","showResultGame","incrementScore","updateGameLevel","floor","levelData","find","level","setIntervalId","clearGameInterval","toggleGameContent","resetGame","setRandomProductNumber","setGameData","products","characters","resetTimeRemainder","incrementNumberCorrect","resetNumberCorrect","showRandomNameCorrect","length","_state$listProducts$r","randomIndex","random","maxRequiredProducts","title","console","error","setAudioBackground","setAudioFail","pauseAudio","pause","playBackgroundSound","play","catch","playSoundGameOver","playbackRateAudioBackground","playbackRate","actions","store","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: 0,\r\n  randomNameCorrect: '',\r\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n  audioFail: new Audio(\"/music/wrong.mp3\"),\r\n  levels: [],\r\n  timeStepPercentage: 10,\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n  audioBackgroundPaused: false,\r\n  showErrorModal: false,\r\n  showResultGameModal: false,\r\n  finalScore: 0,\r\n  numberCorrect: 0,\r\n  numberCorrectDisplay: 'none',\r\n  initTimeRemainder: 100,\r\n  score: 0,\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: 100,\r\n    timerRangeWidth: '100%',\r\n    timeStep: 10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n  requiredProductNumber: 0,\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n  reducers: {\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setTimerInterval(state, action) {\r\n      state.gameTime.timerInterval = action.payload;\r\n    },\r\n    showCountdownTime(state) {\r\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n      if (state.gameTime.timeRemainder <= 0) {\r\n        clearInterval(state.gameTime.timerInterval);\r\n        state.gameTime.timeRemainder = 0;\r\n        state.showErrorModal = true;\r\n      }\r\n      state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 100, 0) + '%';\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    resetCountdownTime(state) {\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    pauseCountdownTime(state) {\r\n      state.gameTime.timeRemaining = state.gameTime.timeRemainder;\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.gameTime.timerInterval = null;\r\n      state.gameTime.timerRangeWidth = `${(state.gameTime.timeRemaining / 100) * 100}%`;\r\n    },\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    showResultGame(state) {\r\n      state.showResultGameModal = true;\r\n      state.finalScore = state.currentScore;\r\n    },\r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    updateGameLevel(state) {\r\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n      if (levelData) {\r\n        state.timeStepPercentage = levelData.timeStepPercentage;\r\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepPercentage);\r\n      }\r\n    },\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    clearGameInterval(state) {\r\n      if (state.intervalId) {\r\n        clearInterval(state.intervalId);\r\n        state.intervalId = null;\r\n      }\r\n    },\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame() {\r\n      return initialState;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n    resetTimeRemainder(state, action) {\r\n      state.gameTime.timeRemainder = action.payload;\r\n    },\r\n    incrementNumberCorrect(state) {\r\n      state.numberCorrect += 1;\r\n    },\r\n    resetNumberCorrect(state) {\r\n      state.numberCorrect = 0;\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      if (state.listProducts.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n        const maxRequiredProducts = 5;\r\n        state.nameCorrectIndex = randomIndex;\r\n        state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n        state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n      } else {\r\n        console.error('listProducts is empty');\r\n      }\r\n    },\r\n    setAudioBackground(state, action) {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail(state, action) {\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    pauseAudio(state) {\r\n      state.audioBackground.pause();\r\n    },\r\n    playBackgroundSound(state) {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver(state) {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground(state, action) {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n  setIntervalId,\r\n  clearGameInterval,\r\n  setTimerInterval,\r\n  showCountdownTime,\r\n  resetCountdownTime,\r\n  pauseCountdownTime,\r\n  showGameOver,\r\n  hideErrorModal,\r\n  showResultGame,\r\n  incrementScore,\r\n  updateGameLevel,\r\n  toggleGameContent,\r\n  resetTimeRemainder,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  incrementNumberCorrect,\r\n  resetNumberCorrect,\r\n  showRandomNameCorrect,\r\n  setAudioBackground,\r\n  setAudioFail,\r\n  pauseAudio,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n} = gameSlice.actions;\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}