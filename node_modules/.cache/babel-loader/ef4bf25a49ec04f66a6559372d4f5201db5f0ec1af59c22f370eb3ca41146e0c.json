{"ast":null,"code":"// src/features/game/gameSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  listProducts: [],\n  listCharacters: [],\n  maxRequiredProducts: 5,\n  nameCorrectIndex: null,\n  requiredNumberProducts: null,\n  randomNameCorrect: '',\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n  audioFail: new Audio(\"/music/wrong.mp3\"),\n  levels: [],\n  timeStepPercentage: [],\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  audioBackgroundPaused: false,\n  showErrorModal: false,\n  showResultGameModal: false,\n  finalScore: 0,\n  numberCorrect: 0,\n  nameCorrectDesc: '',\n  numberCorrectDisplay: 'none',\n  initTimeRemainder: 100,\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: '100%',\n    timerRangeWidth: '100%',\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  currentScore: 0,\n  currentLevel: 1\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setTimerInterval(state, action) {\n      state.gameTime.timerInterval = action.payload;\n    },\n    showCountdownTime(state) {\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\n      if (state.gameTime.timeRemainder <= 0) {\n        clearInterval(state.gameTime.timerInterval);\n        state.gameTime.timeRemainder = 0;\n        state.showErrorModal = true;\n      }\n      state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 10, 0) + '%';\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    resetCountdownTime(state) {\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    pauseCountdownTime(state) {\n      clearInterval(state.gameTime.timerInterval);\n    },\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    showResultGame(state) {\n      state.showResultGameModal = true;\n      state.finalScore = state.currentScore;\n    },\n    hideResultModal(state) {\n      state.showResultGameModal = false;\n    },\n    incrementScore(state) {\n      state.currentScore += 1;\n    },\n    updateGameLevel(state) {\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\n      if (levelData) {\n        state.timeStepDenominator = levelData.timeStepPercentage;\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\n      }\n    },\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    clearGameInterval(state) {\n      if (state.intervalId) {\n        clearInterval(state.intervalId);\n        state.intervalId = null;\n      }\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame(state) {\n      return initialState;\n    },\n    setShowRandomProductName(state, action) {\n      state.requiredProductName = action.payload;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    resetAnswer(state) {\n      state.numberCorrect = 0;\n      state.nameCorrectDesc = '';\n      state.numberCorrectDisplay = 'none';\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n      state.timerRangeWidth = '100%';\n      clearInterval(state.gameTime.timerInterval);\n    },\n    showRandomNameCorrect(state) {\n      const nameCorrectElements = document.querySelectorAll('.name-correct');\n      nameCorrectElements.forEach(element => element.style.display = 'none');\n      const randomIndex = Math.floor(Math.random() * nameCorrectElements.length);\n      state.nameCorrectIndex = randomIndex;\n      if (nameCorrectElements[randomIndex]) {\n        nameCorrectElements[randomIndex].style.display = 'block';\n        const numberCorrect = nameCorrectElements[randomIndex].querySelector(\".name-correct-number\");\n        const descCorrect = nameCorrectElements[randomIndex].querySelector(\".name-correct-desc\");\n        const randomNumber = Math.floor(Math.random() * state.maxRequiredProducts) + 1;\n        numberCorrect.innerText = randomNumber;\n        state.requiredNumberProducts = randomNumber;\n        const randomDesc = state.randomNameCorrect;\n        descCorrect.innerText = randomDesc;\n      }\n      const characterCardListFirst = document.querySelectorAll('.character-card-list > div img:first-child');\n      characterCardListFirst.forEach((item, i) => {\n        item.style.display = i === randomIndex ? 'none' : 'block';\n      });\n      const characterCardListSecond = document.querySelectorAll('.character-card-list > div img:nth-child(2)');\n      characterCardListSecond.forEach((item, i) => {\n        item.style.display = i === randomIndex ? 'block' : 'none';\n      });\n    },\n    setAudioBackground: (state, action) => {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail: (state, action) => {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound: state => {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver: state => {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground: (state, action) => {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  clearGameInterval,\n  setTimerInterval,\n  showCountdownTime,\n  resetCountdownTime,\n  pauseCountdownTime,\n  showGameOver,\n  hideErrorModal,\n  showResultGame,\n  hideResultModal,\n  incrementScore,\n  updateGameLevel,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  resetAnswer,\n  setAudioBackground,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["createSlice","initialState","listProducts","listCharacters","maxRequiredProducts","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","audioBackground","Audio","audioFail","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","audioBackgroundPaused","showErrorModal","showResultGameModal","finalScore","numberCorrect","nameCorrectDesc","numberCorrectDisplay","initTimeRemainder","score","gameTime","timerInterval","timeRemainder","timerRangeWidth","timeStep","gameSound","maxVolume","audioRatio","currentScore","currentLevel","gameSlice","name","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setTimerInterval","showCountdownTime","clearInterval","Math","max","setCountdownTime","resetCountdownTime","pauseCountdownTime","toggleCountdownModal","showGameOver","hideErrorModal","showResultGame","hideResultModal","incrementScore","updateGameLevel","floor","levelData","find","level","timeStepDenominator","setIntervalId","clearGameInterval","toggleGameContent","resetGame","setShowRandomProductName","requiredProductName","setRandomProductNumber","requiredProductNumber","setGameData","products","characters","resetAnswer","showRandomNameCorrect","nameCorrectElements","document","querySelectorAll","forEach","element","style","display","randomIndex","random","length","querySelector","descCorrect","randomNumber","innerText","randomDesc","characterCardListFirst","item","i","characterCardListSecond","setAudioBackground","setAudioFail","playBackgroundSound","play","catch","error","console","playSoundGameOver","playbackRateAudioBackground","playbackRate","actions","store","configureStore","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["// src/features/game/gameSlice.js\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  maxRequiredProducts: 5,\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: null,\r\n  randomNameCorrect: '',\r\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n  audioFail: new Audio(\"/music/wrong.mp3\"),\r\n  levels: [],\r\n  timeStepPercentage: [],\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n  audioBackgroundPaused: false,\r\n  showErrorModal: false,\r\n  showResultGameModal: false,\r\n  finalScore: 0,\r\n  numberCorrect: 0,\r\n  nameCorrectDesc: '',\r\n  numberCorrectDisplay: 'none',\r\n  initTimeRemainder: 100,\r\n  score: 0,\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: '100%',\r\n    timerRangeWidth: '100%',\r\n    timeStep:  10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n  reducers: {\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setTimerInterval(state, action) {\r\n      state.gameTime.timerInterval = action.payload;\r\n    },\r\n    showCountdownTime(state) {\r\n      state.gameTime.timeRemainder -= state.gameTime.timeStep;\r\n      if (state.gameTime.timeRemainder <= 0) {\r\n        clearInterval(state.gameTime.timerInterval);\r\n        state.gameTime.timeRemainder = 0;\r\n        state.showErrorModal = true;\r\n      }\r\n     state.timerRangeWidth = Math.max(state.gameTime.timeRemainder / state.gameTime.timeStep * 10, 0) + '%';\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    resetCountdownTime(state) {\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    pauseCountdownTime(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval); \r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    showResultGame(state) {\r\n      state.showResultGameModal = true;\r\n      state.finalScore = state.currentScore;\r\n    },\r\n    hideResultModal(state) {\r\n      state.showResultGameModal = false;\r\n    },\r\n    incrementScore(state) {\r\n      state.currentScore += 1;\r\n    },\r\n    updateGameLevel(state) {\r\n      state.currentLevel = Math.floor(state.currentScore / 3) + 1;\r\n      const levelData = state.levels.find(level => level.level === state.currentLevel);\r\n      if (levelData) {\r\n        state.timeStepDenominator = levelData.timeStepPercentage;\r\n        state.gameTime.timeStep = state.initTimeRemainder / (100 / state.timeStepDenominator);\r\n      }\r\n    },\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    clearGameInterval(state) {\r\n      if (state.intervalId) {\r\n        clearInterval(state.intervalId);\r\n        state.intervalId = null;\r\n      }\r\n    },\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame(state) {\r\n      return initialState;\r\n    },\r\n    setShowRandomProductName(state, action) {\r\n      state.requiredProductName = action.payload;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n    resetAnswer(state) {\r\n      state.numberCorrect = 0;\r\n      state.nameCorrectDesc = '';\r\n      state.numberCorrectDisplay = 'none';\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n      state.timerRangeWidth = '100%';\r\n      clearInterval(state.gameTime.timerInterval);\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      const nameCorrectElements = document.querySelectorAll('.name-correct');\r\n      nameCorrectElements.forEach(element => element.style.display = 'none');\r\n\r\n      const randomIndex = Math.floor(Math.random() * nameCorrectElements.length);\r\n      state.nameCorrectIndex = randomIndex;\r\n\r\n      if (nameCorrectElements[randomIndex]) {\r\n        nameCorrectElements[randomIndex].style.display = 'block';\r\n\r\n        const numberCorrect = nameCorrectElements[randomIndex].querySelector(\".name-correct-number\");\r\n        const descCorrect = nameCorrectElements[randomIndex].querySelector(\".name-correct-desc\");\r\n\r\n        const randomNumber = Math.floor(Math.random() * state.maxRequiredProducts) + 1;\r\n        numberCorrect.innerText = randomNumber;\r\n        state.requiredNumberProducts = randomNumber;\r\n\r\n        const randomDesc = state.randomNameCorrect;\r\n        descCorrect.innerText = randomDesc;\r\n      }\r\n\r\n      const characterCardListFirst = document.querySelectorAll('.character-card-list > div img:first-child');\r\n      characterCardListFirst.forEach((item, i) => {\r\n        item.style.display = i === randomIndex ? 'none' : 'block';\r\n      });\r\n\r\n      const characterCardListSecond = document.querySelectorAll('.character-card-list > div img:nth-child(2)');\r\n      characterCardListSecond.forEach((item, i) => {\r\n        item.style.display = i === randomIndex ? 'block' : 'none';\r\n      });\r\n    },\r\n    setAudioBackground: (state, action) => {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail: (state, action) => {\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    playBackgroundSound: (state) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver: (state) => {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground: (state, action) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n  setIntervalId,\r\n  clearGameInterval,\r\n  setTimerInterval,\r\n  showCountdownTime,\r\n  resetCountdownTime,\r\n  pauseCountdownTime,\r\n  showGameOver,\r\n  hideErrorModal,\r\n  showResultGame,\r\n  hideResultModal,\r\n  incrementScore,\r\n  updateGameLevel,\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  showRandomNameCorrect,\r\n  resetAnswer,\r\n  setAudioBackground,\r\n  setAudioFail,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n} = gameSlice.actions;\r\n\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}