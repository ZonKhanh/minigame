{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  listProducts: [],\n  listCharacters: [],\n  nameCorrectIndex: null,\n  requiredNumberProducts: null,\n  randomNameCorrect: '',\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\n  audioFail: new Audio(\"/music/wrong.mp3\"),\n  levels: [],\n  timeStepPercentage: [],\n  // Đếm ngươc\n  countdownTime: 3,\n  showCountdownModal: false,\n  intervalId: null,\n  showGameContent: false,\n  // Báo lỗi\n  showErrorModal: false,\n  initTimeRemainder: 100,\n  playTimes: 5,\n  maxRequiredProducts: 5,\n  answerDone: false,\n  timeStepDenominator: 10,\n  score: 0,\n  gameTime: {\n    timerInterval: null,\n    timeRemainder: 100,\n    timeStep: 10\n  },\n  gameSound: {\n    audioBackground: \"/music/bg_sound.mp3\",\n    audioFail: \"music/wrong.mp3\",\n    maxVolume: 1,\n    audioRatio: 1\n  },\n  // Tính điểm\n  currentScore: 0,\n  currentLevel: 1\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    updateCharacters(state, action) {\n      state.listCharacters = action.payload;\n    },\n    updateLevels(state, action) {\n      state.levels = action.payload;\n    },\n    updateTimeStepPercentage(state, action) {\n      state.timeStepPercentage = action.payload;\n    },\n    setCountdownTime(state, action) {\n      state.countdownTime = action.payload;\n    },\n    toggleCountdownModal(state, action) {\n      state.showCountdownModal = action.payload;\n    },\n    showGameOver(state) {\n      clearInterval(state.gameTime.timerInterval);\n      state.showErrorModal = true;\n    },\n    hideErrorModal(state) {\n      state.showErrorModal = false;\n    },\n    // incrementScore:(state) => {\n    //   state.currentScore += 1;\n    // },\n    // updateGameLevel:(state) => {\n    //   // logic cập nhật cấp độ game\n    //   state.gameLevel = Math.floor(state.currentScore / 10) + 1;\n    // },\n    setIntervalId(state, action) {\n      state.intervalId = action.payload;\n    },\n    toggleGameContent(state, action) {\n      state.showGameContent = action.payload;\n    },\n    resetGame(state) {\n      return initialState;\n    },\n    incrementScore(state) {\n      state.incrementScỏe += 1;\n    },\n    updateLevel(state) {\n      state.currentLevel += 1;\n    },\n    setShowRandomProductName(state, action) {\n      state.requiredProductName = action.payload;\n    },\n    setRandomProductNumber(state, action) {\n      state.requiredProductNumber = action.payload;\n    },\n    setGameData(state, action) {\n      state.listProducts = action.payload.products;\n      state.listCharacters = action.payload.characters;\n      state.levels = action.payload.levels;\n    },\n    handleCorrectAnswer(state, action) {\n      const {\n        productCard\n      } = action.payload;\n      const newValue = state.score + 1;\n      state.score = newValue;\n      productCard.numberCorrect += 1;\n      if (newValue > state.requiredNumberProducts) {\n        state.showGameOver = true;\n      } else if (newValue === state.requiredNumberProducts) {\n        state.resetAnswer();\n        state.showRandomNameCorrect();\n        state.showScoreCalculator();\n        state.getAnswer();\n        state.setCountdownTime();\n      }\n    },\n    handleIncorrectAnswer(state) {\n      state.showGameOver = true;\n      state.audioBackground.pause();\n      state.audioFail.play();\n    },\n    resetAnswer(state) {\n      state.score = 0;\n      state.requiredNumberProducts = null;\n      state.randomNameCorrect = '';\n      state.gameTime.timeRemainder = state.initTimeRemainder;\n    },\n    showRandomNameCorrect(state) {\n      var _state$listProducts$r;\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\n      const maxRequiredProducts = 5;\n      state.nameCorrectIndex = randomIndex;\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\n      state.randomNameCorrect = ((_state$listProducts$r = state.listProducts[randomIndex]) === null || _state$listProducts$r === void 0 ? void 0 : _state$listProducts$r.title) || '';\n    },\n    setAudioBackground: (state, action) => {\n      state.audioBackground = new Audio(action.payload);\n    },\n    setAudioFail: (state, action) => {\n      state.audioFail = new Audio(action.payload);\n    },\n    playBackgroundSound: state => {\n      if (state.audioBackground) {\n        state.audioBackground.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playSoundGameOver: state => {\n      if (state.audioFail) {\n        state.audioFail.play().catch(error => {\n          console.error('Audio play failed:', error);\n        });\n      }\n    },\n    playbackRateAudioBackground: (state, action) => {\n      if (state.audioBackground) {\n        state.audioBackground.playbackRate = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  updateProducts,\n  updateCharacters,\n  updateLevels,\n  updateTimeStepPercentage,\n  resetGame,\n  setCountdownTime,\n  toggleCountdownModal,\n  setIntervalId,\n  showGameOver,\n  hideErrorModal,\n  toggleGameContent,\n  setShowRandomProductName,\n  setRandomProductNumber,\n  setGameData,\n  showRandomNameCorrect,\n  handleCorrectAnswer,\n  handleIncorrectAnswer,\n  resetAnswer,\n  setAudioFail,\n  playBackgroundSound,\n  playSoundGameOver,\n  playbackRateAudioBackground,\n  incrementScore,\n  updateGameLevel\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","listProducts","listCharacters","nameCorrectIndex","requiredNumberProducts","randomNameCorrect","audioBackground","Audio","audioFail","levels","timeStepPercentage","countdownTime","showCountdownModal","intervalId","showGameContent","showErrorModal","initTimeRemainder","playTimes","maxRequiredProducts","answerDone","timeStepDenominator","score","gameTime","timerInterval","timeRemainder","timeStep","gameSound","maxVolume","audioRatio","currentScore","currentLevel","gameSlice","name","reducers","updateProducts","state","action","payload","updateCharacters","updateLevels","updateTimeStepPercentage","setCountdownTime","toggleCountdownModal","showGameOver","clearInterval","hideErrorModal","setIntervalId","toggleGameContent","resetGame","incrementScore","incrementScỏe","updateLevel","setShowRandomProductName","requiredProductName","setRandomProductNumber","requiredProductNumber","setGameData","products","characters","handleCorrectAnswer","productCard","newValue","numberCorrect","resetAnswer","showRandomNameCorrect","showScoreCalculator","getAnswer","handleIncorrectAnswer","pause","play","_state$listProducts$r","randomIndex","Math","floor","random","length","title","setAudioBackground","setAudioFail","playBackgroundSound","catch","error","console","playSoundGameOver","playbackRateAudioBackground","playbackRate","updateGameLevel","actions","store","reducer","game"],"sources":["C:/Users/Admin/OneDrive/Máy tính/AUDIO/minigame-react/src/store/gameSlice.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  listProducts: [],\r\n  listCharacters: [],\r\n  nameCorrectIndex: null,\r\n  requiredNumberProducts: null,\r\n  randomNameCorrect: '',\r\n\r\n  audioBackground: new Audio(\"/music/bg_sound.mp3\"),\r\n  audioFail: new Audio(\"/music/wrong.mp3\"),\r\n  levels: [],\r\n  timeStepPercentage: [],\r\n// Đếm ngươc\r\n  countdownTime: 3,\r\n  showCountdownModal: false,\r\n  intervalId: null,\r\n  showGameContent: false,\r\n// Báo lỗi\r\n  showErrorModal: false,\r\n\r\n  initTimeRemainder: 100,\r\n  playTimes: 5,\r\n  maxRequiredProducts: 5,\r\n  answerDone: false,\r\n  timeStepDenominator: 10,\r\n  score: 0,\r\n\r\n  gameTime: {\r\n    timerInterval: null,\r\n    timeRemainder: 100,\r\n    timeStep: 10,\r\n  },\r\n  gameSound: {\r\n    audioBackground: \"/music/bg_sound.mp3\",\r\n    audioFail: \"music/wrong.mp3\",\r\n    maxVolume: 1,\r\n    audioRatio: 1,\r\n  },\r\n// Tính điểm\r\n  currentScore: 0,\r\n  currentLevel: 1,\r\n\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n\r\n  reducers: {\r\n    updateProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n    updateCharacters(state, action) {\r\n      state.listCharacters = action.payload;\r\n    },\r\n    updateLevels(state, action) {\r\n      state.levels = action.payload;\r\n    },\r\n    updateTimeStepPercentage(state, action) {\r\n      state.timeStepPercentage = action.payload;\r\n    },\r\n    setCountdownTime(state, action) {\r\n      state.countdownTime = action.payload;\r\n    },\r\n    toggleCountdownModal(state, action) {\r\n      state.showCountdownModal = action.payload;\r\n    },\r\n    showGameOver(state) {\r\n      clearInterval(state.gameTime.timerInterval);\r\n      state.showErrorModal = true;\r\n    },\r\n    hideErrorModal(state) {\r\n      state.showErrorModal = false;\r\n    },\r\n    // incrementScore:(state) => {\r\n    //   state.currentScore += 1;\r\n    // },\r\n    // updateGameLevel:(state) => {\r\n    //   // logic cập nhật cấp độ game\r\n    //   state.gameLevel = Math.floor(state.currentScore / 10) + 1;\r\n    // },\r\n    setIntervalId(state, action) {\r\n      state.intervalId = action.payload;\r\n    },\r\n    toggleGameContent(state, action) {\r\n      state.showGameContent = action.payload;\r\n    },\r\n    resetGame(state) {\r\n      return initialState;\r\n    },\r\n    incrementScore(state) {\r\n      state.incrementScỏe += 1;\r\n    },\r\n    updateLevel(state) {\r\n      state.currentLevel += 1;\r\n    },\r\n    setShowRandomProductName(state, action) {\r\n      state.requiredProductName = action.payload;\r\n    },\r\n    setRandomProductNumber(state, action) {\r\n      state.requiredProductNumber = action.payload;\r\n    },\r\n    setGameData(state, action) {\r\n      state.listProducts = action.payload.products;\r\n      state.listCharacters = action.payload.characters;\r\n      state.levels = action.payload.levels;\r\n    },\r\n\r\n    handleCorrectAnswer(state, action) {\r\n      const { productCard } = action.payload;\r\n      const newValue = state.score + 1;\r\n      state.score = newValue;\r\n      productCard.numberCorrect += 1;\r\n      if (newValue > state.requiredNumberProducts) {\r\n        state.showGameOver = true;\r\n      } else if (newValue === state.requiredNumberProducts) {\r\n        state.resetAnswer();\r\n        state.showRandomNameCorrect();\r\n        state.showScoreCalculator();\r\n        state.getAnswer();\r\n        state.setCountdownTime();\r\n      }\r\n    },\r\n    handleIncorrectAnswer(state) {\r\n      state.showGameOver = true;\r\n      state.audioBackground.pause();\r\n      state.audioFail.play();\r\n    },\r\n    resetAnswer(state) {\r\n      state.score = 0;\r\n      state.requiredNumberProducts = null;\r\n      state.randomNameCorrect = '';\r\n      state.gameTime.timeRemainder = state.initTimeRemainder;\r\n    },\r\n    showRandomNameCorrect(state) {\r\n      const randomIndex = Math.floor(Math.random() * state.listProducts.length);\r\n      const maxRequiredProducts = 5;\r\n      state.nameCorrectIndex = randomIndex;\r\n      state.requiredNumberProducts = Math.floor(Math.random() * maxRequiredProducts) + 1;\r\n      state.randomNameCorrect = state.listProducts[randomIndex]?.title || '';\r\n    },\r\n    setAudioBackground: (state, action) => {\r\n      state.audioBackground = new Audio(action.payload);\r\n    },\r\n    setAudioFail: (state, action) =>{\r\n      state.audioFail = new Audio(action.payload);\r\n    },\r\n    playBackgroundSound: (state) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playSoundGameOver: (state) => {\r\n      if (state.audioFail) {\r\n        state.audioFail.play().catch(error => {\r\n          console.error('Audio play failed:', error);\r\n        });\r\n      }\r\n    },\r\n    playbackRateAudioBackground: (state, action) => {\r\n      if (state.audioBackground) {\r\n        state.audioBackground.playbackRate = action.payload;\r\n      }\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport const {\r\n  updateProducts,\r\n  updateCharacters,\r\n  updateLevels,\r\n  updateTimeStepPercentage,\r\n  resetGame,\r\n\r\n  setCountdownTime,\r\n  toggleCountdownModal,\r\n  setIntervalId,\r\n\r\n  showGameOver,\r\n  hideErrorModal,  \r\n\r\n  toggleGameContent,\r\n  setShowRandomProductName,\r\n  setRandomProductNumber,\r\n  setGameData,\r\n  showRandomNameCorrect,\r\n  \r\n  handleCorrectAnswer,\r\n  handleIncorrectAnswer,\r\n  resetAnswer,\r\n\r\n  setAudioFail,\r\n  playBackgroundSound,\r\n  playSoundGameOver,\r\n  playbackRateAudioBackground,\r\n\r\n  incrementScore,\r\n  updateGameLevel,\r\n} = gameSlice.actions;\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,EAAE;EAClBC,gBAAgB,EAAE,IAAI;EACtBC,sBAAsB,EAAE,IAAI;EAC5BC,iBAAiB,EAAE,EAAE;EAErBC,eAAe,EAAE,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACjDC,SAAS,EAAE,IAAID,KAAK,CAAC,kBAAkB,CAAC;EACxCE,MAAM,EAAE,EAAE;EACVC,kBAAkB,EAAE,EAAE;EACxB;EACEC,aAAa,EAAE,CAAC;EAChBC,kBAAkB,EAAE,KAAK;EACzBC,UAAU,EAAE,IAAI;EAChBC,eAAe,EAAE,KAAK;EACxB;EACEC,cAAc,EAAE,KAAK;EAErBC,iBAAiB,EAAE,GAAG;EACtBC,SAAS,EAAE,CAAC;EACZC,mBAAmB,EAAE,CAAC;EACtBC,UAAU,EAAE,KAAK;EACjBC,mBAAmB,EAAE,EAAE;EACvBC,KAAK,EAAE,CAAC;EAERC,QAAQ,EAAE;IACRC,aAAa,EAAE,IAAI;IACnBC,aAAa,EAAE,GAAG;IAClBC,QAAQ,EAAE;EACZ,CAAC;EACDC,SAAS,EAAE;IACTpB,eAAe,EAAE,qBAAqB;IACtCE,SAAS,EAAE,iBAAiB;IAC5BmB,SAAS,EAAE,CAAC;IACZC,UAAU,EAAE;EACd,CAAC;EACH;EACEC,YAAY,EAAE,CAAC;EACfC,YAAY,EAAE;AAEhB,CAAC;AAED,MAAMC,SAAS,GAAGhC,WAAW,CAAC;EAC5BiC,IAAI,EAAE,MAAM;EACZhC,YAAY;EAEZiC,QAAQ,EAAE;IACRC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC5BD,KAAK,CAAClC,YAAY,GAAGmC,MAAM,CAACC,OAAO;IACrC,CAAC;IACDC,gBAAgBA,CAACH,KAAK,EAAEC,MAAM,EAAE;MAC9BD,KAAK,CAACjC,cAAc,GAAGkC,MAAM,CAACC,OAAO;IACvC,CAAC;IACDE,YAAYA,CAACJ,KAAK,EAAEC,MAAM,EAAE;MAC1BD,KAAK,CAAC1B,MAAM,GAAG2B,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDG,wBAAwBA,CAACL,KAAK,EAAEC,MAAM,EAAE;MACtCD,KAAK,CAACzB,kBAAkB,GAAG0B,MAAM,CAACC,OAAO;IAC3C,CAAC;IACDI,gBAAgBA,CAACN,KAAK,EAAEC,MAAM,EAAE;MAC9BD,KAAK,CAACxB,aAAa,GAAGyB,MAAM,CAACC,OAAO;IACtC,CAAC;IACDK,oBAAoBA,CAACP,KAAK,EAAEC,MAAM,EAAE;MAClCD,KAAK,CAACvB,kBAAkB,GAAGwB,MAAM,CAACC,OAAO;IAC3C,CAAC;IACDM,YAAYA,CAACR,KAAK,EAAE;MAClBS,aAAa,CAACT,KAAK,CAACb,QAAQ,CAACC,aAAa,CAAC;MAC3CY,KAAK,CAACpB,cAAc,GAAG,IAAI;IAC7B,CAAC;IACD8B,cAAcA,CAACV,KAAK,EAAE;MACpBA,KAAK,CAACpB,cAAc,GAAG,KAAK;IAC9B,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA+B,aAAaA,CAACX,KAAK,EAAEC,MAAM,EAAE;MAC3BD,KAAK,CAACtB,UAAU,GAAGuB,MAAM,CAACC,OAAO;IACnC,CAAC;IACDU,iBAAiBA,CAACZ,KAAK,EAAEC,MAAM,EAAE;MAC/BD,KAAK,CAACrB,eAAe,GAAGsB,MAAM,CAACC,OAAO;IACxC,CAAC;IACDW,SAASA,CAACb,KAAK,EAAE;MACf,OAAOnC,YAAY;IACrB,CAAC;IACDiD,cAAcA,CAACd,KAAK,EAAE;MACpBA,KAAK,CAACe,aAAa,IAAI,CAAC;IAC1B,CAAC;IACDC,WAAWA,CAAChB,KAAK,EAAE;MACjBA,KAAK,CAACL,YAAY,IAAI,CAAC;IACzB,CAAC;IACDsB,wBAAwBA,CAACjB,KAAK,EAAEC,MAAM,EAAE;MACtCD,KAAK,CAACkB,mBAAmB,GAAGjB,MAAM,CAACC,OAAO;IAC5C,CAAC;IACDiB,sBAAsBA,CAACnB,KAAK,EAAEC,MAAM,EAAE;MACpCD,KAAK,CAACoB,qBAAqB,GAAGnB,MAAM,CAACC,OAAO;IAC9C,CAAC;IACDmB,WAAWA,CAACrB,KAAK,EAAEC,MAAM,EAAE;MACzBD,KAAK,CAAClC,YAAY,GAAGmC,MAAM,CAACC,OAAO,CAACoB,QAAQ;MAC5CtB,KAAK,CAACjC,cAAc,GAAGkC,MAAM,CAACC,OAAO,CAACqB,UAAU;MAChDvB,KAAK,CAAC1B,MAAM,GAAG2B,MAAM,CAACC,OAAO,CAAC5B,MAAM;IACtC,CAAC;IAEDkD,mBAAmBA,CAACxB,KAAK,EAAEC,MAAM,EAAE;MACjC,MAAM;QAAEwB;MAAY,CAAC,GAAGxB,MAAM,CAACC,OAAO;MACtC,MAAMwB,QAAQ,GAAG1B,KAAK,CAACd,KAAK,GAAG,CAAC;MAChCc,KAAK,CAACd,KAAK,GAAGwC,QAAQ;MACtBD,WAAW,CAACE,aAAa,IAAI,CAAC;MAC9B,IAAID,QAAQ,GAAG1B,KAAK,CAAC/B,sBAAsB,EAAE;QAC3C+B,KAAK,CAACQ,YAAY,GAAG,IAAI;MAC3B,CAAC,MAAM,IAAIkB,QAAQ,KAAK1B,KAAK,CAAC/B,sBAAsB,EAAE;QACpD+B,KAAK,CAAC4B,WAAW,CAAC,CAAC;QACnB5B,KAAK,CAAC6B,qBAAqB,CAAC,CAAC;QAC7B7B,KAAK,CAAC8B,mBAAmB,CAAC,CAAC;QAC3B9B,KAAK,CAAC+B,SAAS,CAAC,CAAC;QACjB/B,KAAK,CAACM,gBAAgB,CAAC,CAAC;MAC1B;IACF,CAAC;IACD0B,qBAAqBA,CAAChC,KAAK,EAAE;MAC3BA,KAAK,CAACQ,YAAY,GAAG,IAAI;MACzBR,KAAK,CAAC7B,eAAe,CAAC8D,KAAK,CAAC,CAAC;MAC7BjC,KAAK,CAAC3B,SAAS,CAAC6D,IAAI,CAAC,CAAC;IACxB,CAAC;IACDN,WAAWA,CAAC5B,KAAK,EAAE;MACjBA,KAAK,CAACd,KAAK,GAAG,CAAC;MACfc,KAAK,CAAC/B,sBAAsB,GAAG,IAAI;MACnC+B,KAAK,CAAC9B,iBAAiB,GAAG,EAAE;MAC5B8B,KAAK,CAACb,QAAQ,CAACE,aAAa,GAAGW,KAAK,CAACnB,iBAAiB;IACxD,CAAC;IACDgD,qBAAqBA,CAAC7B,KAAK,EAAE;MAAA,IAAAmC,qBAAA;MAC3B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGvC,KAAK,CAAClC,YAAY,CAAC0E,MAAM,CAAC;MACzE,MAAMzD,mBAAmB,GAAG,CAAC;MAC7BiB,KAAK,CAAChC,gBAAgB,GAAGoE,WAAW;MACpCpC,KAAK,CAAC/B,sBAAsB,GAAGoE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGxD,mBAAmB,CAAC,GAAG,CAAC;MAClFiB,KAAK,CAAC9B,iBAAiB,GAAG,EAAAiE,qBAAA,GAAAnC,KAAK,CAAClC,YAAY,CAACsE,WAAW,CAAC,cAAAD,qBAAA,uBAA/BA,qBAAA,CAAiCM,KAAK,KAAI,EAAE;IACxE,CAAC;IACDC,kBAAkB,EAAEA,CAAC1C,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAAC7B,eAAe,GAAG,IAAIC,KAAK,CAAC6B,MAAM,CAACC,OAAO,CAAC;IACnD,CAAC;IACDyC,YAAY,EAAEA,CAAC3C,KAAK,EAAEC,MAAM,KAAI;MAC9BD,KAAK,CAAC3B,SAAS,GAAG,IAAID,KAAK,CAAC6B,MAAM,CAACC,OAAO,CAAC;IAC7C,CAAC;IACD0C,mBAAmB,EAAG5C,KAAK,IAAK;MAC9B,IAAIA,KAAK,CAAC7B,eAAe,EAAE;QACzB6B,KAAK,CAAC7B,eAAe,CAAC+D,IAAI,CAAC,CAAC,CAACW,KAAK,CAACC,KAAK,IAAI;UAC1CC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC5C,CAAC,CAAC;MACJ;IACF,CAAC;IACDE,iBAAiB,EAAGhD,KAAK,IAAK;MAC5B,IAAIA,KAAK,CAAC3B,SAAS,EAAE;QACnB2B,KAAK,CAAC3B,SAAS,CAAC6D,IAAI,CAAC,CAAC,CAACW,KAAK,CAACC,KAAK,IAAI;UACpCC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC5C,CAAC,CAAC;MACJ;IACF,CAAC;IACDG,2BAA2B,EAAEA,CAACjD,KAAK,EAAEC,MAAM,KAAK;MAC9C,IAAID,KAAK,CAAC7B,eAAe,EAAE;QACzB6B,KAAK,CAAC7B,eAAe,CAAC+E,YAAY,GAAGjD,MAAM,CAACC,OAAO;MACrD;IACF;EAEF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,cAAc;EACdI,gBAAgB;EAChBC,YAAY;EACZC,wBAAwB;EACxBQ,SAAS;EAETP,gBAAgB;EAChBC,oBAAoB;EACpBI,aAAa;EAEbH,YAAY;EACZE,cAAc;EAEdE,iBAAiB;EACjBK,wBAAwB;EACxBE,sBAAsB;EACtBE,WAAW;EACXQ,qBAAqB;EAErBL,mBAAmB;EACnBQ,qBAAqB;EACrBJ,WAAW;EAEXe,YAAY;EACZC,mBAAmB;EACnBI,iBAAiB;EACjBC,2BAA2B;EAE3BnC,cAAc;EACdqC;AACF,CAAC,GAAGvD,SAAS,CAACwD,OAAO;AAGrB,OAAO,MAAMC,KAAK,GAAG1F,cAAc,CAAC;EAClC2F,OAAO,EAAE;IACPC,IAAI,EAAE3D,SAAS,CAAC0D;EAClB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}